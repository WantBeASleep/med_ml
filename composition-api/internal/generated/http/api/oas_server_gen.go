// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// UziDevicePost implements POST /uzi/device operation.
	//
	// Добавить uzi аппарат.
	//
	// POST /uzi/device
	UziDevicePost(ctx context.Context, req *UziDevicePostReq) (UziDevicePostRes, error)
	// UziDevicesGet implements GET /uzi/devices operation.
	//
	// Получит список uzi апппапапратов.
	//
	// GET /uzi/devices
	UziDevicesGet(ctx context.Context) (UziDevicesGetRes, error)
	// UziIDEchographicsGet implements GET /uzi/{id}/echographics operation.
	//
	// Получить эхографику uzi.
	//
	// GET /uzi/{id}/echographics
	UziIDEchographicsGet(ctx context.Context, params UziIDEchographicsGetParams) (UziIDEchographicsGetRes, error)
	// UziIDEchographicsPatch implements PATCH /uzi/{id}/echographics operation.
	//
	// Обновить эхографику.
	//
	// PATCH /uzi/{id}/echographics
	UziIDEchographicsPatch(ctx context.Context, req *Echographics, params UziIDEchographicsPatchParams) (UziIDEchographicsPatchRes, error)
	// UziIDGet implements GET /uzi/{id} operation.
	//
	// Получить узи.
	//
	// GET /uzi/{id}
	UziIDGet(ctx context.Context, params UziIDGetParams) (UziIDGetRes, error)
	// UziIDImagesGet implements GET /uzi/{id}/images operation.
	//
	// Получает списк изображений uzi.
	//
	// GET /uzi/{id}/images
	UziIDImagesGet(ctx context.Context, params UziIDImagesGetParams) (UziIDImagesGetRes, error)
	// UziIDNodesGet implements GET /uzi/{id}/nodes operation.
	//
	// Получить все узлы узи.
	//
	// GET /uzi/{id}/nodes
	UziIDNodesGet(ctx context.Context, params UziIDNodesGetParams) (UziIDNodesGetRes, error)
	// UziIDPatch implements PATCH /uzi/{id} operation.
	//
	// Обновить узи.
	//
	// PATCH /uzi/{id}
	UziIDPatch(ctx context.Context, req *UziIDPatchReq, params UziIDPatchParams) (UziIDPatchRes, error)
	// UziImageIDNodesSegmentsGet implements GET /uzi/image/{id}/nodes-segments operation.
	//
	// Получит узлы и сегменты на указанном изображении.
	//
	// GET /uzi/image/{id}/nodes-segments
	UziImageIDNodesSegmentsGet(ctx context.Context, params UziImageIDNodesSegmentsGetParams) (UziImageIDNodesSegmentsGetRes, error)
	// UziNodesIDDelete implements DELETE /uzi/nodes/{id} operation.
	//
	// Сегменты узла будут также удалены.
	//
	// DELETE /uzi/nodes/{id}
	UziNodesIDDelete(ctx context.Context, params UziNodesIDDeleteParams) (UziNodesIDDeleteRes, error)
	// UziNodesIDPatch implements PATCH /uzi/nodes/{id} operation.
	//
	// Обновить узел.
	//
	// PATCH /uzi/nodes/{id}
	UziNodesIDPatch(ctx context.Context, req *UziNodesIDPatchReq, params UziNodesIDPatchParams) (UziNodesIDPatchRes, error)
	// UziNodesIDSegmentsGet implements GET /uzi/nodes/{id}/segments operation.
	//
	// Получить сегменты узла.
	//
	// GET /uzi/nodes/{id}/segments
	UziNodesIDSegmentsGet(ctx context.Context, params UziNodesIDSegmentsGetParams) (UziNodesIDSegmentsGetRes, error)
	// UziNodesSegmentsPost implements POST /uzi/nodes-segments operation.
	//
	// Добавить узел с сегментами.
	//
	// POST /uzi/nodes-segments
	UziNodesSegmentsPost(ctx context.Context, req *UziNodesSegmentsPostReq) (UziNodesSegmentsPostRes, error)
	// UziPost implements POST /uzi operation.
	//
	// Загрузить узи на обработку.
	//
	// POST /uzi
	UziPost(ctx context.Context, req *UziPostReq) (UziPostRes, error)
	// UziSegmentIDDelete implements DELETE /uzi/segment/{id} operation.
	//
	// Если у узла не останется сегментов, он будет **удален**.
	//
	// DELETE /uzi/segment/{id}
	UziSegmentIDDelete(ctx context.Context, params UziSegmentIDDeleteParams) (UziSegmentIDDeleteRes, error)
	// UziSegmentIDPatch implements PATCH /uzi/segment/{id} operation.
	//
	// Обновить сегмент.
	//
	// PATCH /uzi/segment/{id}
	UziSegmentIDPatch(ctx context.Context, req *UziSegmentIDPatchReq, params UziSegmentIDPatchParams) (UziSegmentIDPatchRes, error)
	// UziSegmentPost implements POST /uzi/segment operation.
	//
	// Добавить новый сегмент.
	//
	// POST /uzi/segment
	UziSegmentPost(ctx context.Context, req *UziSegmentPostReq) (UziSegmentPostRes, error)
	// UzisExternalIDGet implements GET /uzis/{external_id} operation.
	//
	// Получить узи по внешнему id.
	//
	// GET /uzis/{external_id}
	UzisExternalIDGet(ctx context.Context, params UzisExternalIDGetParams) (UzisExternalIDGetRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
