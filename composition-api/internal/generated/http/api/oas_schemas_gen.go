// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	ht "github.com/ogen-go/ogen/http"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Карта пациента.
// Ref: #/components/schemas/card
type Card struct {
	// Id пациента.
	PatientID uuid.UUID `json:"patient_id"`
	// Id врача.
	DoctorID uuid.UUID `json:"doctor_id"`
	// Диагноз.
	Diagnosis OptString `json:"diagnosis"`
}

// GetPatientID returns the value of PatientID.
func (s *Card) GetPatientID() uuid.UUID {
	return s.PatientID
}

// GetDoctorID returns the value of DoctorID.
func (s *Card) GetDoctorID() uuid.UUID {
	return s.DoctorID
}

// GetDiagnosis returns the value of Diagnosis.
func (s *Card) GetDiagnosis() OptString {
	return s.Diagnosis
}

// SetPatientID sets the value of PatientID.
func (s *Card) SetPatientID(val uuid.UUID) {
	s.PatientID = val
}

// SetDoctorID sets the value of DoctorID.
func (s *Card) SetDoctorID(val uuid.UUID) {
	s.DoctorID = val
}

// SetDiagnosis sets the value of Diagnosis.
func (s *Card) SetDiagnosis(val OptString) {
	s.Diagnosis = val
}

func (*Card) medCardDoctorIDPatientIDGetRes()   {}
func (*Card) medCardDoctorIDPatientIDPatchRes() {}

type Contor []ContorItem

type ContorItem struct {
	// X координата точки.
	X int `json:"x"`
	// Y координата точки.
	Y int `json:"y"`
}

// GetX returns the value of X.
func (s *ContorItem) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *ContorItem) GetY() int {
	return s.Y
}

// SetX sets the value of X.
func (s *ContorItem) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *ContorItem) SetY(val int) {
	s.Y = val
}

// Узи аппарат.
// Ref: #/components/schemas/device
type Device struct {
	// Id устройства.
	ID int `json:"id"`
	// Название устройства.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *Device) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Device) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *Device) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Device) SetName(val string) {
	s.Name = val
}

// Врач.
// Ref: #/components/schemas/doctor
type Doctor struct {
	// Id врача.
	ID uuid.UUID `json:"id"`
	// Полное имя врача.
	Fullname string `json:"fullname"`
	// Организация врача.
	Org string `json:"org"`
	// Работа врача.
	Job string `json:"job"`
	// Описание врача (раб. стаж).
	Description OptString `json:"description"`
}

// GetID returns the value of ID.
func (s *Doctor) GetID() uuid.UUID {
	return s.ID
}

// GetFullname returns the value of Fullname.
func (s *Doctor) GetFullname() string {
	return s.Fullname
}

// GetOrg returns the value of Org.
func (s *Doctor) GetOrg() string {
	return s.Org
}

// GetJob returns the value of Job.
func (s *Doctor) GetJob() string {
	return s.Job
}

// GetDescription returns the value of Description.
func (s *Doctor) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *Doctor) SetID(val uuid.UUID) {
	s.ID = val
}

// SetFullname sets the value of Fullname.
func (s *Doctor) SetFullname(val string) {
	s.Fullname = val
}

// SetOrg sets the value of Org.
func (s *Doctor) SetOrg(val string) {
	s.Org = val
}

// SetJob sets the value of Job.
func (s *Doctor) SetJob(val string) {
	s.Job = val
}

// SetDescription sets the value of Description.
func (s *Doctor) SetDescription(val OptString) {
	s.Description = val
}

func (*Doctor) medDoctorIDGetRes() {}

type DownloadUziIDImageIDGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DownloadUziIDImageIDGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*DownloadUziIDImageIDGetOK) downloadUziIDImageIDGetRes() {}

// Эхографическая информация.
// Ref: #/components/schemas/echographics
type Echographics struct {
	// Id узи.
	ID uuid.UUID `json:"id"`
	// Контуры.
	Contors OptString `json:"contors"`
	// Длина левого доли.
	LeftLobeLength OptFloat64 `json:"left_lobe_length"`
	// Ширина левого доли.
	LeftLobeWidth OptFloat64 `json:"left_lobe_width"`
	// Толщина левого доли.
	LeftLobeThick OptFloat64 `json:"left_lobe_thick"`
	// Объем левого доли.
	LeftLobeVolum OptFloat64 `json:"left_lobe_volum"`
	// Длина правого доли.
	RightLobeLength OptFloat64 `json:"right_lobe_length"`
	// Ширина правого доли.
	RightLobeWidth OptFloat64 `json:"right_lobe_width"`
	// Толщина правого доли.
	RightLobeThick OptFloat64 `json:"right_lobe_thick"`
	// Объем правого доли.
	RightLobeVolum OptFloat64 `json:"right_lobe_volum"`
	// Объем железы.
	GlandVolum OptFloat64 `json:"gland_volum"`
	// Перешеек.
	Isthmus OptFloat64 `json:"isthmus"`
	// Структура.
	Struct OptString `json:"struct"`
	// Эхогенность.
	Echogenicity OptString `json:"echogenicity"`
	// Регионарные лимфоузлы.
	RegionalLymph OptString `json:"regional_lymph"`
	// Васкуляризация по ЦДК.
	Vascularization OptString `json:"vascularization"`
	// Расположение.
	Location OptString `json:"location"`
	// Дополнительная информация.
	Additional OptString `json:"additional"`
	// Заключение.
	Conclusion OptString `json:"conclusion"`
}

// GetID returns the value of ID.
func (s *Echographics) GetID() uuid.UUID {
	return s.ID
}

// GetContors returns the value of Contors.
func (s *Echographics) GetContors() OptString {
	return s.Contors
}

// GetLeftLobeLength returns the value of LeftLobeLength.
func (s *Echographics) GetLeftLobeLength() OptFloat64 {
	return s.LeftLobeLength
}

// GetLeftLobeWidth returns the value of LeftLobeWidth.
func (s *Echographics) GetLeftLobeWidth() OptFloat64 {
	return s.LeftLobeWidth
}

// GetLeftLobeThick returns the value of LeftLobeThick.
func (s *Echographics) GetLeftLobeThick() OptFloat64 {
	return s.LeftLobeThick
}

// GetLeftLobeVolum returns the value of LeftLobeVolum.
func (s *Echographics) GetLeftLobeVolum() OptFloat64 {
	return s.LeftLobeVolum
}

// GetRightLobeLength returns the value of RightLobeLength.
func (s *Echographics) GetRightLobeLength() OptFloat64 {
	return s.RightLobeLength
}

// GetRightLobeWidth returns the value of RightLobeWidth.
func (s *Echographics) GetRightLobeWidth() OptFloat64 {
	return s.RightLobeWidth
}

// GetRightLobeThick returns the value of RightLobeThick.
func (s *Echographics) GetRightLobeThick() OptFloat64 {
	return s.RightLobeThick
}

// GetRightLobeVolum returns the value of RightLobeVolum.
func (s *Echographics) GetRightLobeVolum() OptFloat64 {
	return s.RightLobeVolum
}

// GetGlandVolum returns the value of GlandVolum.
func (s *Echographics) GetGlandVolum() OptFloat64 {
	return s.GlandVolum
}

// GetIsthmus returns the value of Isthmus.
func (s *Echographics) GetIsthmus() OptFloat64 {
	return s.Isthmus
}

// GetStruct returns the value of Struct.
func (s *Echographics) GetStruct() OptString {
	return s.Struct
}

// GetEchogenicity returns the value of Echogenicity.
func (s *Echographics) GetEchogenicity() OptString {
	return s.Echogenicity
}

// GetRegionalLymph returns the value of RegionalLymph.
func (s *Echographics) GetRegionalLymph() OptString {
	return s.RegionalLymph
}

// GetVascularization returns the value of Vascularization.
func (s *Echographics) GetVascularization() OptString {
	return s.Vascularization
}

// GetLocation returns the value of Location.
func (s *Echographics) GetLocation() OptString {
	return s.Location
}

// GetAdditional returns the value of Additional.
func (s *Echographics) GetAdditional() OptString {
	return s.Additional
}

// GetConclusion returns the value of Conclusion.
func (s *Echographics) GetConclusion() OptString {
	return s.Conclusion
}

// SetID sets the value of ID.
func (s *Echographics) SetID(val uuid.UUID) {
	s.ID = val
}

// SetContors sets the value of Contors.
func (s *Echographics) SetContors(val OptString) {
	s.Contors = val
}

// SetLeftLobeLength sets the value of LeftLobeLength.
func (s *Echographics) SetLeftLobeLength(val OptFloat64) {
	s.LeftLobeLength = val
}

// SetLeftLobeWidth sets the value of LeftLobeWidth.
func (s *Echographics) SetLeftLobeWidth(val OptFloat64) {
	s.LeftLobeWidth = val
}

// SetLeftLobeThick sets the value of LeftLobeThick.
func (s *Echographics) SetLeftLobeThick(val OptFloat64) {
	s.LeftLobeThick = val
}

// SetLeftLobeVolum sets the value of LeftLobeVolum.
func (s *Echographics) SetLeftLobeVolum(val OptFloat64) {
	s.LeftLobeVolum = val
}

// SetRightLobeLength sets the value of RightLobeLength.
func (s *Echographics) SetRightLobeLength(val OptFloat64) {
	s.RightLobeLength = val
}

// SetRightLobeWidth sets the value of RightLobeWidth.
func (s *Echographics) SetRightLobeWidth(val OptFloat64) {
	s.RightLobeWidth = val
}

// SetRightLobeThick sets the value of RightLobeThick.
func (s *Echographics) SetRightLobeThick(val OptFloat64) {
	s.RightLobeThick = val
}

// SetRightLobeVolum sets the value of RightLobeVolum.
func (s *Echographics) SetRightLobeVolum(val OptFloat64) {
	s.RightLobeVolum = val
}

// SetGlandVolum sets the value of GlandVolum.
func (s *Echographics) SetGlandVolum(val OptFloat64) {
	s.GlandVolum = val
}

// SetIsthmus sets the value of Isthmus.
func (s *Echographics) SetIsthmus(val OptFloat64) {
	s.Isthmus = val
}

// SetStruct sets the value of Struct.
func (s *Echographics) SetStruct(val OptString) {
	s.Struct = val
}

// SetEchogenicity sets the value of Echogenicity.
func (s *Echographics) SetEchogenicity(val OptString) {
	s.Echogenicity = val
}

// SetRegionalLymph sets the value of RegionalLymph.
func (s *Echographics) SetRegionalLymph(val OptString) {
	s.RegionalLymph = val
}

// SetVascularization sets the value of Vascularization.
func (s *Echographics) SetVascularization(val OptString) {
	s.Vascularization = val
}

// SetLocation sets the value of Location.
func (s *Echographics) SetLocation(val OptString) {
	s.Location = val
}

// SetAdditional sets the value of Additional.
func (s *Echographics) SetAdditional(val OptString) {
	s.Additional = val
}

// SetConclusion sets the value of Conclusion.
func (s *Echographics) SetConclusion(val OptString) {
	s.Conclusion = val
}

func (*Echographics) uziIDEchographicsGetRes()   {}
func (*Echographics) uziIDEchographicsPatchRes() {}

// Ошибка.
// Ref: #/components/schemas/error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) downloadUziIDImageIDGetRes()       {}
func (*ErrorStatusCode) loginPostRes()                     {}
func (*ErrorStatusCode) medCardDoctorIDPatientIDGetRes()   {}
func (*ErrorStatusCode) medCardDoctorIDPatientIDPatchRes() {}
func (*ErrorStatusCode) medCardPostRes()                   {}
func (*ErrorStatusCode) medDoctorIDGetRes()                {}
func (*ErrorStatusCode) medPatientIDGetRes()               {}
func (*ErrorStatusCode) medPatientIDPatchRes()             {}
func (*ErrorStatusCode) medPatientPostRes()                {}
func (*ErrorStatusCode) refreshPostRes()                   {}
func (*ErrorStatusCode) regDoctorPostRes()                 {}
func (*ErrorStatusCode) regPatientPostRes()                {}
func (*ErrorStatusCode) uziDevicePostRes()                 {}
func (*ErrorStatusCode) uziDevicesGetRes()                 {}
func (*ErrorStatusCode) uziIDDeleteRes()                   {}
func (*ErrorStatusCode) uziIDEchographicsGetRes()          {}
func (*ErrorStatusCode) uziIDEchographicsPatchRes()        {}
func (*ErrorStatusCode) uziIDGetRes()                      {}
func (*ErrorStatusCode) uziIDImagesGetRes()                {}
func (*ErrorStatusCode) uziIDNodesGetRes()                 {}
func (*ErrorStatusCode) uziIDNodesSegmentsPostRes()        {}
func (*ErrorStatusCode) uziIDPatchRes()                    {}
func (*ErrorStatusCode) uziImageIDNodesSegmentsGetRes()    {}
func (*ErrorStatusCode) uziNodesIDDeleteRes()              {}
func (*ErrorStatusCode) uziNodesIDPatchRes()               {}
func (*ErrorStatusCode) uziNodesIDSegmentsGetRes()         {}
func (*ErrorStatusCode) uziPostRes()                       {}
func (*ErrorStatusCode) uziSegmentIDDeleteRes()            {}
func (*ErrorStatusCode) uziSegmentIDPatchRes()             {}
func (*ErrorStatusCode) uziSegmentPostRes()                {}
func (*ErrorStatusCode) uzisAuthorIDGetRes()               {}
func (*ErrorStatusCode) uzisExternalIDGetRes()             {}

// Изображение.
// Ref: #/components/schemas/image
type Image struct {
	// Id изображения.
	ID uuid.UUID `json:"id"`
	// Id узи, к которому относится изображение.
	UziID uuid.UUID `json:"uzi_id"`
	// Номер страницы.
	Page int `json:"page"`
}

// GetID returns the value of ID.
func (s *Image) GetID() uuid.UUID {
	return s.ID
}

// GetUziID returns the value of UziID.
func (s *Image) GetUziID() uuid.UUID {
	return s.UziID
}

// GetPage returns the value of Page.
func (s *Image) GetPage() int {
	return s.Page
}

// SetID sets the value of ID.
func (s *Image) SetID(val uuid.UUID) {
	s.ID = val
}

// SetUziID sets the value of UziID.
func (s *Image) SetUziID(val uuid.UUID) {
	s.UziID = val
}

// SetPage sets the value of Page.
func (s *Image) SetPage(val int) {
	s.Page = val
}

type LoginPostOK struct {
	// Access токен.
	AccessToken string `json:"access_token"`
	// Refresh токен.
	RefreshToken string `json:"refresh_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *LoginPostOK) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *LoginPostOK) GetRefreshToken() string {
	return s.RefreshToken
}

// SetAccessToken sets the value of AccessToken.
func (s *LoginPostOK) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *LoginPostOK) SetRefreshToken(val string) {
	s.RefreshToken = val
}

func (*LoginPostOK) loginPostRes() {}

type LoginPostReq struct {
	// Email аккаунта.
	Email string `json:"email"`
	// Пароль аккаунта.
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *LoginPostReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *LoginPostReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *LoginPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *LoginPostReq) SetPassword(val string) {
	s.Password = val
}

type MedCardDoctorIDPatientIDPatchReq struct {
	// Диагноз пациента.
	Diagnosis string `json:"diagnosis"`
}

// GetDiagnosis returns the value of Diagnosis.
func (s *MedCardDoctorIDPatientIDPatchReq) GetDiagnosis() string {
	return s.Diagnosis
}

// SetDiagnosis sets the value of Diagnosis.
func (s *MedCardDoctorIDPatientIDPatchReq) SetDiagnosis(val string) {
	s.Diagnosis = val
}

// MedCardPostOK is response for MedCardPost operation.
type MedCardPostOK struct{}

func (*MedCardPostOK) medCardPostRes() {}

type MedDoctorIDPatientsGetInternalServerError ErrorStatusCode

func (*MedDoctorIDPatientsGetInternalServerError) medDoctorIDPatientsGetRes() {}

type MedDoctorIDPatientsGetNotFound ErrorStatusCode

func (*MedDoctorIDPatientsGetNotFound) medDoctorIDPatientsGetRes() {}

type MedDoctorIDPatientsGetOKApplicationJSON []Patient

func (*MedDoctorIDPatientsGetOKApplicationJSON) medDoctorIDPatientsGetRes() {}

type MedPatientIDPatchReq struct {
	// Признак того, что пациент активен.
	Active OptBool `json:"active"`
	// Признак того, что пациент имеет злокачественную
	// опухоль.
	Malignancy OptBool `json:"malignancy"`
}

// GetActive returns the value of Active.
func (s *MedPatientIDPatchReq) GetActive() OptBool {
	return s.Active
}

// GetMalignancy returns the value of Malignancy.
func (s *MedPatientIDPatchReq) GetMalignancy() OptBool {
	return s.Malignancy
}

// SetActive sets the value of Active.
func (s *MedPatientIDPatchReq) SetActive(val OptBool) {
	s.Active = val
}

// SetMalignancy sets the value of Malignancy.
func (s *MedPatientIDPatchReq) SetMalignancy(val OptBool) {
	s.Malignancy = val
}

type MedPatientPostReq struct {
	// Полное имя пациента.
	Fullname string `json:"fullname"`
	// Email пациента.
	Email string `json:"email"`
	// Полис пациента.
	Policy string `json:"policy"`
	// Признак того, что пациент активен.
	Active bool `json:"active"`
	// Признак того, что пациент имеет злокачественную
	// опухоль.
	Malignancy bool `json:"malignancy"`
	// Дата рождения пациента в формате ISO 8601.
	BirthDate time.Time `json:"birth_date"`
}

// GetFullname returns the value of Fullname.
func (s *MedPatientPostReq) GetFullname() string {
	return s.Fullname
}

// GetEmail returns the value of Email.
func (s *MedPatientPostReq) GetEmail() string {
	return s.Email
}

// GetPolicy returns the value of Policy.
func (s *MedPatientPostReq) GetPolicy() string {
	return s.Policy
}

// GetActive returns the value of Active.
func (s *MedPatientPostReq) GetActive() bool {
	return s.Active
}

// GetMalignancy returns the value of Malignancy.
func (s *MedPatientPostReq) GetMalignancy() bool {
	return s.Malignancy
}

// GetBirthDate returns the value of BirthDate.
func (s *MedPatientPostReq) GetBirthDate() time.Time {
	return s.BirthDate
}

// SetFullname sets the value of Fullname.
func (s *MedPatientPostReq) SetFullname(val string) {
	s.Fullname = val
}

// SetEmail sets the value of Email.
func (s *MedPatientPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPolicy sets the value of Policy.
func (s *MedPatientPostReq) SetPolicy(val string) {
	s.Policy = val
}

// SetActive sets the value of Active.
func (s *MedPatientPostReq) SetActive(val bool) {
	s.Active = val
}

// SetMalignancy sets the value of Malignancy.
func (s *MedPatientPostReq) SetMalignancy(val bool) {
	s.Malignancy = val
}

// SetBirthDate sets the value of BirthDate.
func (s *MedPatientPostReq) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

// Узел.
// Ref: #/components/schemas/node
type Node struct {
	// Id узла.
	ID uuid.UUID `json:"id"`
	// Признак того, что узел был создан нейронкой.
	Ai bool `json:"ai"`
	// Id узи, к которому относится узел.
	UziID uuid.UUID `json:"uzi_id"`
	// Валидация нейроночного узла врачем.
	Validation OptNilNodeValidation `json:"validation"`
	// Вероятность наличия опухоли в 23-й группе.
	Tirads23 float64 `json:"tirads_23"`
	// Вероятность наличия опухоли в 4-й группе.
	Tirads4 float64 `json:"tirads_4"`
	// Вероятность наличия опухоли в 5-й группе.
	Tirads5 float64 `json:"tirads_5"`
	// Описание узла.
	Description OptString `json:"description"`
}

// GetID returns the value of ID.
func (s *Node) GetID() uuid.UUID {
	return s.ID
}

// GetAi returns the value of Ai.
func (s *Node) GetAi() bool {
	return s.Ai
}

// GetUziID returns the value of UziID.
func (s *Node) GetUziID() uuid.UUID {
	return s.UziID
}

// GetValidation returns the value of Validation.
func (s *Node) GetValidation() OptNilNodeValidation {
	return s.Validation
}

// GetTirads23 returns the value of Tirads23.
func (s *Node) GetTirads23() float64 {
	return s.Tirads23
}

// GetTirads4 returns the value of Tirads4.
func (s *Node) GetTirads4() float64 {
	return s.Tirads4
}

// GetTirads5 returns the value of Tirads5.
func (s *Node) GetTirads5() float64 {
	return s.Tirads5
}

// GetDescription returns the value of Description.
func (s *Node) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *Node) SetID(val uuid.UUID) {
	s.ID = val
}

// SetAi sets the value of Ai.
func (s *Node) SetAi(val bool) {
	s.Ai = val
}

// SetUziID sets the value of UziID.
func (s *Node) SetUziID(val uuid.UUID) {
	s.UziID = val
}

// SetValidation sets the value of Validation.
func (s *Node) SetValidation(val OptNilNodeValidation) {
	s.Validation = val
}

// SetTirads23 sets the value of Tirads23.
func (s *Node) SetTirads23(val float64) {
	s.Tirads23 = val
}

// SetTirads4 sets the value of Tirads4.
func (s *Node) SetTirads4(val float64) {
	s.Tirads4 = val
}

// SetTirads5 sets the value of Tirads5.
func (s *Node) SetTirads5(val float64) {
	s.Tirads5 = val
}

// SetDescription sets the value of Description.
func (s *Node) SetDescription(val OptString) {
	s.Description = val
}

func (*Node) uziNodesIDPatchRes() {}

// Валидация нейроночного узла врачем.
type NodeValidation string

const (
	NodeValidationInvalid NodeValidation = "invalid"
	NodeValidationValid   NodeValidation = "valid"
)

// AllValues returns all NodeValidation values.
func (NodeValidation) AllValues() []NodeValidation {
	return []NodeValidation{
		NodeValidationInvalid,
		NodeValidationValid,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NodeValidation) MarshalText() ([]byte, error) {
	switch s {
	case NodeValidationInvalid:
		return []byte(s), nil
	case NodeValidationValid:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeValidation) UnmarshalText(data []byte) error {
	switch NodeValidation(data) {
	case NodeValidationInvalid:
		*s = NodeValidationInvalid
		return nil
	case NodeValidationValid:
		*s = NodeValidationValid
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNodeValidation returns new OptNilNodeValidation with value set to v.
func NewOptNilNodeValidation(v NodeValidation) OptNilNodeValidation {
	return OptNilNodeValidation{
		Value: v,
		Set:   true,
	}
}

// OptNilNodeValidation is optional nullable NodeValidation.
type OptNilNodeValidation struct {
	Value NodeValidation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNodeValidation was set.
func (o OptNilNodeValidation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNodeValidation) Reset() {
	var v NodeValidation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNodeValidation) SetTo(v NodeValidation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNodeValidation) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNodeValidation) SetToNull() {
	o.Set = true
	o.Null = true
	var v NodeValidation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNodeValidation) Get() (v NodeValidation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNodeValidation) Or(d NodeValidation) NodeValidation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUziNodesIDPatchReqValidation returns new OptNilUziNodesIDPatchReqValidation with value set to v.
func NewOptNilUziNodesIDPatchReqValidation(v UziNodesIDPatchReqValidation) OptNilUziNodesIDPatchReqValidation {
	return OptNilUziNodesIDPatchReqValidation{
		Value: v,
		Set:   true,
	}
}

// OptNilUziNodesIDPatchReqValidation is optional nullable UziNodesIDPatchReqValidation.
type OptNilUziNodesIDPatchReqValidation struct {
	Value UziNodesIDPatchReqValidation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUziNodesIDPatchReqValidation was set.
func (o OptNilUziNodesIDPatchReqValidation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUziNodesIDPatchReqValidation) Reset() {
	var v UziNodesIDPatchReqValidation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUziNodesIDPatchReqValidation) SetTo(v UziNodesIDPatchReqValidation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUziNodesIDPatchReqValidation) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUziNodesIDPatchReqValidation) SetToNull() {
	o.Set = true
	o.Null = true
	var v UziNodesIDPatchReqValidation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUziNodesIDPatchReqValidation) Get() (v UziNodesIDPatchReqValidation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUziNodesIDPatchReqValidation) Or(d UziNodesIDPatchReqValidation) UziNodesIDPatchReqValidation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUziIDPatchReqProjection returns new OptUziIDPatchReqProjection with value set to v.
func NewOptUziIDPatchReqProjection(v UziIDPatchReqProjection) OptUziIDPatchReqProjection {
	return OptUziIDPatchReqProjection{
		Value: v,
		Set:   true,
	}
}

// OptUziIDPatchReqProjection is optional UziIDPatchReqProjection.
type OptUziIDPatchReqProjection struct {
	Value UziIDPatchReqProjection
	Set   bool
}

// IsSet returns true if OptUziIDPatchReqProjection was set.
func (o OptUziIDPatchReqProjection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUziIDPatchReqProjection) Reset() {
	var v UziIDPatchReqProjection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUziIDPatchReqProjection) SetTo(v UziIDPatchReqProjection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUziIDPatchReqProjection) Get() (v UziIDPatchReqProjection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUziIDPatchReqProjection) Or(d UziIDPatchReqProjection) UziIDPatchReqProjection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Пациент.
// Ref: #/components/schemas/patient
type Patient struct {
	// Id пациента.
	ID uuid.UUID `json:"id"`
	// Полное имя пациента.
	Fullname string `json:"fullname"`
	// Email пациента.
	Email string `json:"email"`
	// Полис пациента.
	Policy string `json:"policy"`
	// Признак того, что пациент активен.
	Active bool `json:"active"`
	// Признак того, что пациент имеет злокачественную
	// опухоль.
	Malignancy bool `json:"malignancy"`
	// Дата рождения пациента.
	BirthDate time.Time `json:"birth_date"`
	// Дата последнего узи.
	LastUziDate OptDate `json:"last_uzi_date"`
}

// GetID returns the value of ID.
func (s *Patient) GetID() uuid.UUID {
	return s.ID
}

// GetFullname returns the value of Fullname.
func (s *Patient) GetFullname() string {
	return s.Fullname
}

// GetEmail returns the value of Email.
func (s *Patient) GetEmail() string {
	return s.Email
}

// GetPolicy returns the value of Policy.
func (s *Patient) GetPolicy() string {
	return s.Policy
}

// GetActive returns the value of Active.
func (s *Patient) GetActive() bool {
	return s.Active
}

// GetMalignancy returns the value of Malignancy.
func (s *Patient) GetMalignancy() bool {
	return s.Malignancy
}

// GetBirthDate returns the value of BirthDate.
func (s *Patient) GetBirthDate() time.Time {
	return s.BirthDate
}

// GetLastUziDate returns the value of LastUziDate.
func (s *Patient) GetLastUziDate() OptDate {
	return s.LastUziDate
}

// SetID sets the value of ID.
func (s *Patient) SetID(val uuid.UUID) {
	s.ID = val
}

// SetFullname sets the value of Fullname.
func (s *Patient) SetFullname(val string) {
	s.Fullname = val
}

// SetEmail sets the value of Email.
func (s *Patient) SetEmail(val string) {
	s.Email = val
}

// SetPolicy sets the value of Policy.
func (s *Patient) SetPolicy(val string) {
	s.Policy = val
}

// SetActive sets the value of Active.
func (s *Patient) SetActive(val bool) {
	s.Active = val
}

// SetMalignancy sets the value of Malignancy.
func (s *Patient) SetMalignancy(val bool) {
	s.Malignancy = val
}

// SetBirthDate sets the value of BirthDate.
func (s *Patient) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

// SetLastUziDate sets the value of LastUziDate.
func (s *Patient) SetLastUziDate(val OptDate) {
	s.LastUziDate = val
}

func (*Patient) medPatientIDGetRes()   {}
func (*Patient) medPatientIDPatchRes() {}

type RefreshPostOK struct {
	// Access токен.
	AccessToken string `json:"access_token"`
	// Refresh токен.
	RefreshToken string `json:"refresh_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *RefreshPostOK) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshPostOK) GetRefreshToken() string {
	return s.RefreshToken
}

// SetAccessToken sets the value of AccessToken.
func (s *RefreshPostOK) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshPostOK) SetRefreshToken(val string) {
	s.RefreshToken = val
}

func (*RefreshPostOK) refreshPostRes() {}

type RefreshPostReq struct {
	// Refresh токен.
	RefreshToken string `json:"refresh_token"`
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshPostReq) GetRefreshToken() string {
	return s.RefreshToken
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshPostReq) SetRefreshToken(val string) {
	s.RefreshToken = val
}

type RegDoctorPostReq struct {
	// Email врача.
	Email string `json:"email"`
	// Пароль врача.
	Password string `json:"password"`
	// Полное имя врача.
	Fullname string `json:"fullname"`
	// Организация врача.
	Org string `json:"org"`
	// Работа врача.
	Job string `json:"job"`
	// Описание врача (раб. стаж).
	Description OptString `json:"description"`
}

// GetEmail returns the value of Email.
func (s *RegDoctorPostReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *RegDoctorPostReq) GetPassword() string {
	return s.Password
}

// GetFullname returns the value of Fullname.
func (s *RegDoctorPostReq) GetFullname() string {
	return s.Fullname
}

// GetOrg returns the value of Org.
func (s *RegDoctorPostReq) GetOrg() string {
	return s.Org
}

// GetJob returns the value of Job.
func (s *RegDoctorPostReq) GetJob() string {
	return s.Job
}

// GetDescription returns the value of Description.
func (s *RegDoctorPostReq) GetDescription() OptString {
	return s.Description
}

// SetEmail sets the value of Email.
func (s *RegDoctorPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *RegDoctorPostReq) SetPassword(val string) {
	s.Password = val
}

// SetFullname sets the value of Fullname.
func (s *RegDoctorPostReq) SetFullname(val string) {
	s.Fullname = val
}

// SetOrg sets the value of Org.
func (s *RegDoctorPostReq) SetOrg(val string) {
	s.Org = val
}

// SetJob sets the value of Job.
func (s *RegDoctorPostReq) SetJob(val string) {
	s.Job = val
}

// SetDescription sets the value of Description.
func (s *RegDoctorPostReq) SetDescription(val OptString) {
	s.Description = val
}

type RegPatientPostReq struct {
	// Полное имя пациента.
	Fullname string `json:"fullname"`
	// Полис пациента.
	Policy string `json:"policy"`
	// Дата рождения пациента.
	BirthDate time.Time `json:"birth_date"`
	// Email врача.
	Email string `json:"email"`
	// Пароль врача.
	Password string `json:"password"`
}

// GetFullname returns the value of Fullname.
func (s *RegPatientPostReq) GetFullname() string {
	return s.Fullname
}

// GetPolicy returns the value of Policy.
func (s *RegPatientPostReq) GetPolicy() string {
	return s.Policy
}

// GetBirthDate returns the value of BirthDate.
func (s *RegPatientPostReq) GetBirthDate() time.Time {
	return s.BirthDate
}

// GetEmail returns the value of Email.
func (s *RegPatientPostReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *RegPatientPostReq) GetPassword() string {
	return s.Password
}

// SetFullname sets the value of Fullname.
func (s *RegPatientPostReq) SetFullname(val string) {
	s.Fullname = val
}

// SetPolicy sets the value of Policy.
func (s *RegPatientPostReq) SetPolicy(val string) {
	s.Policy = val
}

// SetBirthDate sets the value of BirthDate.
func (s *RegPatientPostReq) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

// SetEmail sets the value of Email.
func (s *RegPatientPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *RegPatientPostReq) SetPassword(val string) {
	s.Password = val
}

// Сегмент узла на изображении.
// Ref: #/components/schemas/segment
type Segment struct {
	// Id сегмента.
	ID uuid.UUID `json:"id"`
	// Id изображения, к которому относится сегмент.
	ImageID uuid.UUID `json:"image_id"`
	// Id узла, к которому относится сегмент.
	NodeID uuid.UUID `json:"node_id"`
	// Контур сегмента.
	Contor Contor `json:"contor"`
	// Признак того, что сегмент был создан нейронкой.
	Ai bool `json:"ai"`
	// Вероятность наличия опухоли в 23-й группе.
	Tirads23 float64 `json:"tirads_23"`
	// Вероятность наличия опухоли в 4-й группе.
	Tirads4 float64 `json:"tirads_4"`
	// Вероятность наличия опухоли в 5-й группе.
	Tirads5 float64 `json:"tirads_5"`
}

// GetID returns the value of ID.
func (s *Segment) GetID() uuid.UUID {
	return s.ID
}

// GetImageID returns the value of ImageID.
func (s *Segment) GetImageID() uuid.UUID {
	return s.ImageID
}

// GetNodeID returns the value of NodeID.
func (s *Segment) GetNodeID() uuid.UUID {
	return s.NodeID
}

// GetContor returns the value of Contor.
func (s *Segment) GetContor() Contor {
	return s.Contor
}

// GetAi returns the value of Ai.
func (s *Segment) GetAi() bool {
	return s.Ai
}

// GetTirads23 returns the value of Tirads23.
func (s *Segment) GetTirads23() float64 {
	return s.Tirads23
}

// GetTirads4 returns the value of Tirads4.
func (s *Segment) GetTirads4() float64 {
	return s.Tirads4
}

// GetTirads5 returns the value of Tirads5.
func (s *Segment) GetTirads5() float64 {
	return s.Tirads5
}

// SetID sets the value of ID.
func (s *Segment) SetID(val uuid.UUID) {
	s.ID = val
}

// SetImageID sets the value of ImageID.
func (s *Segment) SetImageID(val uuid.UUID) {
	s.ImageID = val
}

// SetNodeID sets the value of NodeID.
func (s *Segment) SetNodeID(val uuid.UUID) {
	s.NodeID = val
}

// SetContor sets the value of Contor.
func (s *Segment) SetContor(val Contor) {
	s.Contor = val
}

// SetAi sets the value of Ai.
func (s *Segment) SetAi(val bool) {
	s.Ai = val
}

// SetTirads23 sets the value of Tirads23.
func (s *Segment) SetTirads23(val float64) {
	s.Tirads23 = val
}

// SetTirads4 sets the value of Tirads4.
func (s *Segment) SetTirads4(val float64) {
	s.Tirads4 = val
}

// SetTirads5 sets the value of Tirads5.
func (s *Segment) SetTirads5(val float64) {
	s.Tirads5 = val
}

func (*Segment) uziSegmentIDPatchRes() {}

// Uuid.
// Ref: #/components/schemas/simpleUuid
type SimpleUuid struct {
	ID uuid.UUID `json:"id"`
}

// GetID returns the value of ID.
func (s *SimpleUuid) GetID() uuid.UUID {
	return s.ID
}

// SetID sets the value of ID.
func (s *SimpleUuid) SetID(val uuid.UUID) {
	s.ID = val
}

func (*SimpleUuid) medPatientPostRes() {}
func (*SimpleUuid) regDoctorPostRes()  {}
func (*SimpleUuid) regPatientPostRes() {}
func (*SimpleUuid) uziPostRes()        {}
func (*SimpleUuid) uziSegmentPostRes() {}

// Узи.
// Ref: #/components/schemas/uzi
type Uzi struct {
	// Id узи.
	ID uuid.UUID `json:"id"`
	// Проекция узи.
	Projection UziProjection `json:"projection"`
	// Проверенно ли врачем.
	Checked bool `json:"checked"`
	// Id пациента/организации etc. Внешняя связсь.
	ExternalID uuid.UUID `json:"external_id"`
	// Id аккаунта, загрузившего узи.
	AuthorID uuid.UUID `json:"author_id"`
	// Id устройства.
	DeviceID int `json:"device_id"`
	// Статус узи **new** - новое узи **pending** - в обработке
	// нейронкой **completed** - обработано.
	Status UziStatus `json:"status"`
	// Дата создания в формате RFC3339.
	CreateAt time.Time `json:"create_at"`
}

// GetID returns the value of ID.
func (s *Uzi) GetID() uuid.UUID {
	return s.ID
}

// GetProjection returns the value of Projection.
func (s *Uzi) GetProjection() UziProjection {
	return s.Projection
}

// GetChecked returns the value of Checked.
func (s *Uzi) GetChecked() bool {
	return s.Checked
}

// GetExternalID returns the value of ExternalID.
func (s *Uzi) GetExternalID() uuid.UUID {
	return s.ExternalID
}

// GetAuthorID returns the value of AuthorID.
func (s *Uzi) GetAuthorID() uuid.UUID {
	return s.AuthorID
}

// GetDeviceID returns the value of DeviceID.
func (s *Uzi) GetDeviceID() int {
	return s.DeviceID
}

// GetStatus returns the value of Status.
func (s *Uzi) GetStatus() UziStatus {
	return s.Status
}

// GetCreateAt returns the value of CreateAt.
func (s *Uzi) GetCreateAt() time.Time {
	return s.CreateAt
}

// SetID sets the value of ID.
func (s *Uzi) SetID(val uuid.UUID) {
	s.ID = val
}

// SetProjection sets the value of Projection.
func (s *Uzi) SetProjection(val UziProjection) {
	s.Projection = val
}

// SetChecked sets the value of Checked.
func (s *Uzi) SetChecked(val bool) {
	s.Checked = val
}

// SetExternalID sets the value of ExternalID.
func (s *Uzi) SetExternalID(val uuid.UUID) {
	s.ExternalID = val
}

// SetAuthorID sets the value of AuthorID.
func (s *Uzi) SetAuthorID(val uuid.UUID) {
	s.AuthorID = val
}

// SetDeviceID sets the value of DeviceID.
func (s *Uzi) SetDeviceID(val int) {
	s.DeviceID = val
}

// SetStatus sets the value of Status.
func (s *Uzi) SetStatus(val UziStatus) {
	s.Status = val
}

// SetCreateAt sets the value of CreateAt.
func (s *Uzi) SetCreateAt(val time.Time) {
	s.CreateAt = val
}

func (*Uzi) uziIDGetRes()   {}
func (*Uzi) uziIDPatchRes() {}

type UziDevicePostOK struct {
	// Id uzi аппарата.
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *UziDevicePostOK) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *UziDevicePostOK) SetID(val int) {
	s.ID = val
}

func (*UziDevicePostOK) uziDevicePostRes() {}

type UziDevicePostReq struct {
	// Именование модели узи аппарата.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *UziDevicePostReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *UziDevicePostReq) SetName(val string) {
	s.Name = val
}

type UziDevicesGetOKApplicationJSON []Device

func (*UziDevicesGetOKApplicationJSON) uziDevicesGetRes() {}

// UziIDDeleteOK is response for UziIDDelete operation.
type UziIDDeleteOK struct{}

func (*UziIDDeleteOK) uziIDDeleteRes() {}

type UziIDImagesGetOKApplicationJSON []Image

func (*UziIDImagesGetOKApplicationJSON) uziIDImagesGetRes() {}

type UziIDNodesGetOKApplicationJSON []Node

func (*UziIDNodesGetOKApplicationJSON) uziIDNodesGetRes() {}

type UziIDNodesSegmentsPostOK struct {
	NodeID     uuid.UUID   `json:"node_id"`
	SegmentIds []uuid.UUID `json:"segment_ids"`
}

// GetNodeID returns the value of NodeID.
func (s *UziIDNodesSegmentsPostOK) GetNodeID() uuid.UUID {
	return s.NodeID
}

// GetSegmentIds returns the value of SegmentIds.
func (s *UziIDNodesSegmentsPostOK) GetSegmentIds() []uuid.UUID {
	return s.SegmentIds
}

// SetNodeID sets the value of NodeID.
func (s *UziIDNodesSegmentsPostOK) SetNodeID(val uuid.UUID) {
	s.NodeID = val
}

// SetSegmentIds sets the value of SegmentIds.
func (s *UziIDNodesSegmentsPostOK) SetSegmentIds(val []uuid.UUID) {
	s.SegmentIds = val
}

func (*UziIDNodesSegmentsPostOK) uziIDNodesSegmentsPostRes() {}

type UziIDNodesSegmentsPostReq struct {
	Node     UziIDNodesSegmentsPostReqNode           `json:"node"`
	Segments []UziIDNodesSegmentsPostReqSegmentsItem `json:"segments"`
}

// GetNode returns the value of Node.
func (s *UziIDNodesSegmentsPostReq) GetNode() UziIDNodesSegmentsPostReqNode {
	return s.Node
}

// GetSegments returns the value of Segments.
func (s *UziIDNodesSegmentsPostReq) GetSegments() []UziIDNodesSegmentsPostReqSegmentsItem {
	return s.Segments
}

// SetNode sets the value of Node.
func (s *UziIDNodesSegmentsPostReq) SetNode(val UziIDNodesSegmentsPostReqNode) {
	s.Node = val
}

// SetSegments sets the value of Segments.
func (s *UziIDNodesSegmentsPostReq) SetSegments(val []UziIDNodesSegmentsPostReqSegmentsItem) {
	s.Segments = val
}

type UziIDNodesSegmentsPostReqNode struct {
	Tirads23 float64 `json:"tirads_23"`
	Tirads4  float64 `json:"tirads_4"`
	Tirads5  float64 `json:"tirads_5"`
	// Описание узла.
	Description OptString `json:"description"`
}

// GetTirads23 returns the value of Tirads23.
func (s *UziIDNodesSegmentsPostReqNode) GetTirads23() float64 {
	return s.Tirads23
}

// GetTirads4 returns the value of Tirads4.
func (s *UziIDNodesSegmentsPostReqNode) GetTirads4() float64 {
	return s.Tirads4
}

// GetTirads5 returns the value of Tirads5.
func (s *UziIDNodesSegmentsPostReqNode) GetTirads5() float64 {
	return s.Tirads5
}

// GetDescription returns the value of Description.
func (s *UziIDNodesSegmentsPostReqNode) GetDescription() OptString {
	return s.Description
}

// SetTirads23 sets the value of Tirads23.
func (s *UziIDNodesSegmentsPostReqNode) SetTirads23(val float64) {
	s.Tirads23 = val
}

// SetTirads4 sets the value of Tirads4.
func (s *UziIDNodesSegmentsPostReqNode) SetTirads4(val float64) {
	s.Tirads4 = val
}

// SetTirads5 sets the value of Tirads5.
func (s *UziIDNodesSegmentsPostReqNode) SetTirads5(val float64) {
	s.Tirads5 = val
}

// SetDescription sets the value of Description.
func (s *UziIDNodesSegmentsPostReqNode) SetDescription(val OptString) {
	s.Description = val
}

type UziIDNodesSegmentsPostReqSegmentsItem struct {
	ImageID  uuid.UUID `json:"image_id"`
	Contor   Contor    `json:"contor"`
	Tirads23 float64   `json:"tirads_23"`
	Tirads4  float64   `json:"tirads_4"`
	Tirads5  float64   `json:"tirads_5"`
}

// GetImageID returns the value of ImageID.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) GetImageID() uuid.UUID {
	return s.ImageID
}

// GetContor returns the value of Contor.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) GetContor() Contor {
	return s.Contor
}

// GetTirads23 returns the value of Tirads23.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) GetTirads23() float64 {
	return s.Tirads23
}

// GetTirads4 returns the value of Tirads4.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) GetTirads4() float64 {
	return s.Tirads4
}

// GetTirads5 returns the value of Tirads5.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) GetTirads5() float64 {
	return s.Tirads5
}

// SetImageID sets the value of ImageID.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) SetImageID(val uuid.UUID) {
	s.ImageID = val
}

// SetContor sets the value of Contor.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) SetContor(val Contor) {
	s.Contor = val
}

// SetTirads23 sets the value of Tirads23.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) SetTirads23(val float64) {
	s.Tirads23 = val
}

// SetTirads4 sets the value of Tirads4.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) SetTirads4(val float64) {
	s.Tirads4 = val
}

// SetTirads5 sets the value of Tirads5.
func (s *UziIDNodesSegmentsPostReqSegmentsItem) SetTirads5(val float64) {
	s.Tirads5 = val
}

type UziIDPatchReq struct {
	// Проекция узи.
	Projection OptUziIDPatchReqProjection `json:"projection"`
	// Признак того, что узи проверено врачом.
	Checked OptBool `json:"checked"`
}

// GetProjection returns the value of Projection.
func (s *UziIDPatchReq) GetProjection() OptUziIDPatchReqProjection {
	return s.Projection
}

// GetChecked returns the value of Checked.
func (s *UziIDPatchReq) GetChecked() OptBool {
	return s.Checked
}

// SetProjection sets the value of Projection.
func (s *UziIDPatchReq) SetProjection(val OptUziIDPatchReqProjection) {
	s.Projection = val
}

// SetChecked sets the value of Checked.
func (s *UziIDPatchReq) SetChecked(val OptBool) {
	s.Checked = val
}

// Проекция узи.
type UziIDPatchReqProjection string

const (
	UziIDPatchReqProjectionCross UziIDPatchReqProjection = "cross"
	UziIDPatchReqProjectionLong  UziIDPatchReqProjection = "long"
)

// AllValues returns all UziIDPatchReqProjection values.
func (UziIDPatchReqProjection) AllValues() []UziIDPatchReqProjection {
	return []UziIDPatchReqProjection{
		UziIDPatchReqProjectionCross,
		UziIDPatchReqProjectionLong,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UziIDPatchReqProjection) MarshalText() ([]byte, error) {
	switch s {
	case UziIDPatchReqProjectionCross:
		return []byte(s), nil
	case UziIDPatchReqProjectionLong:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UziIDPatchReqProjection) UnmarshalText(data []byte) error {
	switch UziIDPatchReqProjection(data) {
	case UziIDPatchReqProjectionCross:
		*s = UziIDPatchReqProjectionCross
		return nil
	case UziIDPatchReqProjectionLong:
		*s = UziIDPatchReqProjectionLong
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UziImageIDNodesSegmentsGetOK struct {
	Nodes    []Node    `json:"nodes"`
	Segments []Segment `json:"segments"`
}

// GetNodes returns the value of Nodes.
func (s *UziImageIDNodesSegmentsGetOK) GetNodes() []Node {
	return s.Nodes
}

// GetSegments returns the value of Segments.
func (s *UziImageIDNodesSegmentsGetOK) GetSegments() []Segment {
	return s.Segments
}

// SetNodes sets the value of Nodes.
func (s *UziImageIDNodesSegmentsGetOK) SetNodes(val []Node) {
	s.Nodes = val
}

// SetSegments sets the value of Segments.
func (s *UziImageIDNodesSegmentsGetOK) SetSegments(val []Segment) {
	s.Segments = val
}

func (*UziImageIDNodesSegmentsGetOK) uziImageIDNodesSegmentsGetRes() {}

// UziNodesIDDeleteOK is response for UziNodesIDDelete operation.
type UziNodesIDDeleteOK struct{}

func (*UziNodesIDDeleteOK) uziNodesIDDeleteRes() {}

type UziNodesIDPatchReq struct {
	Validation OptNilUziNodesIDPatchReqValidation `json:"validation"`
	Tirads23   OptFloat64                         `json:"tirads_23"`
	Tirads4    OptFloat64                         `json:"tirads_4"`
	Tirads5    OptFloat64                         `json:"tirads_5"`
}

// GetValidation returns the value of Validation.
func (s *UziNodesIDPatchReq) GetValidation() OptNilUziNodesIDPatchReqValidation {
	return s.Validation
}

// GetTirads23 returns the value of Tirads23.
func (s *UziNodesIDPatchReq) GetTirads23() OptFloat64 {
	return s.Tirads23
}

// GetTirads4 returns the value of Tirads4.
func (s *UziNodesIDPatchReq) GetTirads4() OptFloat64 {
	return s.Tirads4
}

// GetTirads5 returns the value of Tirads5.
func (s *UziNodesIDPatchReq) GetTirads5() OptFloat64 {
	return s.Tirads5
}

// SetValidation sets the value of Validation.
func (s *UziNodesIDPatchReq) SetValidation(val OptNilUziNodesIDPatchReqValidation) {
	s.Validation = val
}

// SetTirads23 sets the value of Tirads23.
func (s *UziNodesIDPatchReq) SetTirads23(val OptFloat64) {
	s.Tirads23 = val
}

// SetTirads4 sets the value of Tirads4.
func (s *UziNodesIDPatchReq) SetTirads4(val OptFloat64) {
	s.Tirads4 = val
}

// SetTirads5 sets the value of Tirads5.
func (s *UziNodesIDPatchReq) SetTirads5(val OptFloat64) {
	s.Tirads5 = val
}

type UziNodesIDPatchReqValidation string

const (
	UziNodesIDPatchReqValidationInvalid UziNodesIDPatchReqValidation = "invalid"
	UziNodesIDPatchReqValidationValid   UziNodesIDPatchReqValidation = "valid"
)

// AllValues returns all UziNodesIDPatchReqValidation values.
func (UziNodesIDPatchReqValidation) AllValues() []UziNodesIDPatchReqValidation {
	return []UziNodesIDPatchReqValidation{
		UziNodesIDPatchReqValidationInvalid,
		UziNodesIDPatchReqValidationValid,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UziNodesIDPatchReqValidation) MarshalText() ([]byte, error) {
	switch s {
	case UziNodesIDPatchReqValidationInvalid:
		return []byte(s), nil
	case UziNodesIDPatchReqValidationValid:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UziNodesIDPatchReqValidation) UnmarshalText(data []byte) error {
	switch UziNodesIDPatchReqValidation(data) {
	case UziNodesIDPatchReqValidationInvalid:
		*s = UziNodesIDPatchReqValidationInvalid
		return nil
	case UziNodesIDPatchReqValidationValid:
		*s = UziNodesIDPatchReqValidationValid
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UziNodesIDSegmentsGetOKApplicationJSON []Segment

func (*UziNodesIDSegmentsGetOKApplicationJSON) uziNodesIDSegmentsGetRes() {}

type UziPostReq struct {
	// Файл узи. **обязательно с .tiff/.png**.
	File ht.MultipartFile `json:"file"`
	// Проекция узи.
	Projection UziPostReqProjection `json:"projection"`
	// Внешний id пациента/организации etc.
	ExternalID uuid.UUID `json:"external_id"`
	// Id узи аппарата.
	DeviceID int `json:"device_id"`
	// Описание узи.
	Description OptString `json:"description"`
}

// GetFile returns the value of File.
func (s *UziPostReq) GetFile() ht.MultipartFile {
	return s.File
}

// GetProjection returns the value of Projection.
func (s *UziPostReq) GetProjection() UziPostReqProjection {
	return s.Projection
}

// GetExternalID returns the value of ExternalID.
func (s *UziPostReq) GetExternalID() uuid.UUID {
	return s.ExternalID
}

// GetDeviceID returns the value of DeviceID.
func (s *UziPostReq) GetDeviceID() int {
	return s.DeviceID
}

// GetDescription returns the value of Description.
func (s *UziPostReq) GetDescription() OptString {
	return s.Description
}

// SetFile sets the value of File.
func (s *UziPostReq) SetFile(val ht.MultipartFile) {
	s.File = val
}

// SetProjection sets the value of Projection.
func (s *UziPostReq) SetProjection(val UziPostReqProjection) {
	s.Projection = val
}

// SetExternalID sets the value of ExternalID.
func (s *UziPostReq) SetExternalID(val uuid.UUID) {
	s.ExternalID = val
}

// SetDeviceID sets the value of DeviceID.
func (s *UziPostReq) SetDeviceID(val int) {
	s.DeviceID = val
}

// SetDescription sets the value of Description.
func (s *UziPostReq) SetDescription(val OptString) {
	s.Description = val
}

// Проекция узи.
type UziPostReqProjection string

const (
	UziPostReqProjectionCross UziPostReqProjection = "cross"
	UziPostReqProjectionLong  UziPostReqProjection = "long"
)

// AllValues returns all UziPostReqProjection values.
func (UziPostReqProjection) AllValues() []UziPostReqProjection {
	return []UziPostReqProjection{
		UziPostReqProjectionCross,
		UziPostReqProjectionLong,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UziPostReqProjection) MarshalText() ([]byte, error) {
	switch s {
	case UziPostReqProjectionCross:
		return []byte(s), nil
	case UziPostReqProjectionLong:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UziPostReqProjection) UnmarshalText(data []byte) error {
	switch UziPostReqProjection(data) {
	case UziPostReqProjectionCross:
		*s = UziPostReqProjectionCross
		return nil
	case UziPostReqProjectionLong:
		*s = UziPostReqProjectionLong
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Проекция узи.
type UziProjection string

const (
	UziProjectionCross UziProjection = "cross"
	UziProjectionLong  UziProjection = "long"
)

// AllValues returns all UziProjection values.
func (UziProjection) AllValues() []UziProjection {
	return []UziProjection{
		UziProjectionCross,
		UziProjectionLong,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UziProjection) MarshalText() ([]byte, error) {
	switch s {
	case UziProjectionCross:
		return []byte(s), nil
	case UziProjectionLong:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UziProjection) UnmarshalText(data []byte) error {
	switch UziProjection(data) {
	case UziProjectionCross:
		*s = UziProjectionCross
		return nil
	case UziProjectionLong:
		*s = UziProjectionLong
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UziSegmentIDDeleteOK is response for UziSegmentIDDelete operation.
type UziSegmentIDDeleteOK struct{}

func (*UziSegmentIDDeleteOK) uziSegmentIDDeleteRes() {}

type UziSegmentIDPatchReq struct {
	Contor   Contor     `json:"contor"`
	Tirads23 OptFloat64 `json:"tirads_23"`
	Tirads4  OptFloat64 `json:"tirads_4"`
	Tirads5  OptFloat64 `json:"tirads_5"`
}

// GetContor returns the value of Contor.
func (s *UziSegmentIDPatchReq) GetContor() Contor {
	return s.Contor
}

// GetTirads23 returns the value of Tirads23.
func (s *UziSegmentIDPatchReq) GetTirads23() OptFloat64 {
	return s.Tirads23
}

// GetTirads4 returns the value of Tirads4.
func (s *UziSegmentIDPatchReq) GetTirads4() OptFloat64 {
	return s.Tirads4
}

// GetTirads5 returns the value of Tirads5.
func (s *UziSegmentIDPatchReq) GetTirads5() OptFloat64 {
	return s.Tirads5
}

// SetContor sets the value of Contor.
func (s *UziSegmentIDPatchReq) SetContor(val Contor) {
	s.Contor = val
}

// SetTirads23 sets the value of Tirads23.
func (s *UziSegmentIDPatchReq) SetTirads23(val OptFloat64) {
	s.Tirads23 = val
}

// SetTirads4 sets the value of Tirads4.
func (s *UziSegmentIDPatchReq) SetTirads4(val OptFloat64) {
	s.Tirads4 = val
}

// SetTirads5 sets the value of Tirads5.
func (s *UziSegmentIDPatchReq) SetTirads5(val OptFloat64) {
	s.Tirads5 = val
}

type UziSegmentPostReq struct {
	ImageID  uuid.UUID `json:"image_id"`
	NodeID   uuid.UUID `json:"node_id"`
	Contor   Contor    `json:"contor"`
	Tirads23 float64   `json:"tirads_23"`
	Tirads4  float64   `json:"tirads_4"`
	Tirads5  float64   `json:"tirads_5"`
}

// GetImageID returns the value of ImageID.
func (s *UziSegmentPostReq) GetImageID() uuid.UUID {
	return s.ImageID
}

// GetNodeID returns the value of NodeID.
func (s *UziSegmentPostReq) GetNodeID() uuid.UUID {
	return s.NodeID
}

// GetContor returns the value of Contor.
func (s *UziSegmentPostReq) GetContor() Contor {
	return s.Contor
}

// GetTirads23 returns the value of Tirads23.
func (s *UziSegmentPostReq) GetTirads23() float64 {
	return s.Tirads23
}

// GetTirads4 returns the value of Tirads4.
func (s *UziSegmentPostReq) GetTirads4() float64 {
	return s.Tirads4
}

// GetTirads5 returns the value of Tirads5.
func (s *UziSegmentPostReq) GetTirads5() float64 {
	return s.Tirads5
}

// SetImageID sets the value of ImageID.
func (s *UziSegmentPostReq) SetImageID(val uuid.UUID) {
	s.ImageID = val
}

// SetNodeID sets the value of NodeID.
func (s *UziSegmentPostReq) SetNodeID(val uuid.UUID) {
	s.NodeID = val
}

// SetContor sets the value of Contor.
func (s *UziSegmentPostReq) SetContor(val Contor) {
	s.Contor = val
}

// SetTirads23 sets the value of Tirads23.
func (s *UziSegmentPostReq) SetTirads23(val float64) {
	s.Tirads23 = val
}

// SetTirads4 sets the value of Tirads4.
func (s *UziSegmentPostReq) SetTirads4(val float64) {
	s.Tirads4 = val
}

// SetTirads5 sets the value of Tirads5.
func (s *UziSegmentPostReq) SetTirads5(val float64) {
	s.Tirads5 = val
}

// Статус узи **new** - новое узи **pending** - в обработке
// нейронкой **completed** - обработано.
type UziStatus string

const (
	UziStatusNew       UziStatus = "new"
	UziStatusPending   UziStatus = "pending"
	UziStatusCompleted UziStatus = "completed"
)

// AllValues returns all UziStatus values.
func (UziStatus) AllValues() []UziStatus {
	return []UziStatus{
		UziStatusNew,
		UziStatusPending,
		UziStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UziStatus) MarshalText() ([]byte, error) {
	switch s {
	case UziStatusNew:
		return []byte(s), nil
	case UziStatusPending:
		return []byte(s), nil
	case UziStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UziStatus) UnmarshalText(data []byte) error {
	switch UziStatus(data) {
	case UziStatusNew:
		*s = UziStatusNew
		return nil
	case UziStatusPending:
		*s = UziStatusPending
		return nil
	case UziStatusCompleted:
		*s = UziStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UzisAuthorIDGetOKApplicationJSON []Uzi

func (*UzisAuthorIDGetOKApplicationJSON) uzisAuthorIDGetRes() {}

type UzisExternalIDGetOKApplicationJSON []Uzi

func (*UzisExternalIDGetOKApplicationJSON) uzisExternalIDGetRes() {}
