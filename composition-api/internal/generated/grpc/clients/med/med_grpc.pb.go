// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/grpc/clients/med.proto

package med

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedSrv_RegisterDoctor_FullMethodName        = "/MedSrv/registerDoctor"
	MedSrv_GetDoctor_FullMethodName             = "/MedSrv/getDoctor"
	MedSrv_CreatePatient_FullMethodName         = "/MedSrv/createPatient"
	MedSrv_GetPatient_FullMethodName            = "/MedSrv/getPatient"
	MedSrv_GetPatientsByDoctorID_FullMethodName = "/MedSrv/getPatientsByDoctorID"
	MedSrv_UpdatePatient_FullMethodName         = "/MedSrv/updatePatient"
	MedSrv_CreateCard_FullMethodName            = "/MedSrv/createCard"
	MedSrv_GetCard_FullMethodName               = "/MedSrv/getCard"
	MedSrv_UpdateCard_FullMethodName            = "/MedSrv/updateCard"
)

// MedSrvClient is the client API for MedSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedSrvClient interface {
	RegisterDoctor(ctx context.Context, in *RegisterDoctorIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDoctor(ctx context.Context, in *GetDoctorIn, opts ...grpc.CallOption) (*GetDoctorOut, error)
	CreatePatient(ctx context.Context, in *CreatePatientIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPatient(ctx context.Context, in *GetPatientIn, opts ...grpc.CallOption) (*GetPatientOut, error)
	GetPatientsByDoctorID(ctx context.Context, in *GetPatientsByDoctorIDIn, opts ...grpc.CallOption) (*GetPatientsByDoctorIDOut, error)
	UpdatePatient(ctx context.Context, in *UpdatePatientIn, opts ...grpc.CallOption) (*UpdatePatientOut, error)
	CreateCard(ctx context.Context, in *CreateCardIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCard(ctx context.Context, in *GetCardIn, opts ...grpc.CallOption) (*GetCardOut, error)
	UpdateCard(ctx context.Context, in *UpdateCardIn, opts ...grpc.CallOption) (*UpdateCardOut, error)
}

type medSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewMedSrvClient(cc grpc.ClientConnInterface) MedSrvClient {
	return &medSrvClient{cc}
}

func (c *medSrvClient) RegisterDoctor(ctx context.Context, in *RegisterDoctorIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MedSrv_RegisterDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) GetDoctor(ctx context.Context, in *GetDoctorIn, opts ...grpc.CallOption) (*GetDoctorOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorOut)
	err := c.cc.Invoke(ctx, MedSrv_GetDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) CreatePatient(ctx context.Context, in *CreatePatientIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MedSrv_CreatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) GetPatient(ctx context.Context, in *GetPatientIn, opts ...grpc.CallOption) (*GetPatientOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientOut)
	err := c.cc.Invoke(ctx, MedSrv_GetPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) GetPatientsByDoctorID(ctx context.Context, in *GetPatientsByDoctorIDIn, opts ...grpc.CallOption) (*GetPatientsByDoctorIDOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientsByDoctorIDOut)
	err := c.cc.Invoke(ctx, MedSrv_GetPatientsByDoctorID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) UpdatePatient(ctx context.Context, in *UpdatePatientIn, opts ...grpc.CallOption) (*UpdatePatientOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePatientOut)
	err := c.cc.Invoke(ctx, MedSrv_UpdatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) CreateCard(ctx context.Context, in *CreateCardIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MedSrv_CreateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) GetCard(ctx context.Context, in *GetCardIn, opts ...grpc.CallOption) (*GetCardOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardOut)
	err := c.cc.Invoke(ctx, MedSrv_GetCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medSrvClient) UpdateCard(ctx context.Context, in *UpdateCardIn, opts ...grpc.CallOption) (*UpdateCardOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCardOut)
	err := c.cc.Invoke(ctx, MedSrv_UpdateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedSrvServer is the server API for MedSrv service.
// All implementations must embed UnimplementedMedSrvServer
// for forward compatibility.
type MedSrvServer interface {
	RegisterDoctor(context.Context, *RegisterDoctorIn) (*emptypb.Empty, error)
	GetDoctor(context.Context, *GetDoctorIn) (*GetDoctorOut, error)
	CreatePatient(context.Context, *CreatePatientIn) (*emptypb.Empty, error)
	GetPatient(context.Context, *GetPatientIn) (*GetPatientOut, error)
	GetPatientsByDoctorID(context.Context, *GetPatientsByDoctorIDIn) (*GetPatientsByDoctorIDOut, error)
	UpdatePatient(context.Context, *UpdatePatientIn) (*UpdatePatientOut, error)
	CreateCard(context.Context, *CreateCardIn) (*emptypb.Empty, error)
	GetCard(context.Context, *GetCardIn) (*GetCardOut, error)
	UpdateCard(context.Context, *UpdateCardIn) (*UpdateCardOut, error)
	mustEmbedUnimplementedMedSrvServer()
}

// UnimplementedMedSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedSrvServer struct{}

func (UnimplementedMedSrvServer) RegisterDoctor(context.Context, *RegisterDoctorIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDoctor not implemented")
}
func (UnimplementedMedSrvServer) GetDoctor(context.Context, *GetDoctorIn) (*GetDoctorOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctor not implemented")
}
func (UnimplementedMedSrvServer) CreatePatient(context.Context, *CreatePatientIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedMedSrvServer) GetPatient(context.Context, *GetPatientIn) (*GetPatientOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatient not implemented")
}
func (UnimplementedMedSrvServer) GetPatientsByDoctorID(context.Context, *GetPatientsByDoctorIDIn) (*GetPatientsByDoctorIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByDoctorID not implemented")
}
func (UnimplementedMedSrvServer) UpdatePatient(context.Context, *UpdatePatientIn) (*UpdatePatientOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedMedSrvServer) CreateCard(context.Context, *CreateCardIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedMedSrvServer) GetCard(context.Context, *GetCardIn) (*GetCardOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedMedSrvServer) UpdateCard(context.Context, *UpdateCardIn) (*UpdateCardOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedMedSrvServer) mustEmbedUnimplementedMedSrvServer() {}
func (UnimplementedMedSrvServer) testEmbeddedByValue()                {}

// UnsafeMedSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedSrvServer will
// result in compilation errors.
type UnsafeMedSrvServer interface {
	mustEmbedUnimplementedMedSrvServer()
}

func RegisterMedSrvServer(s grpc.ServiceRegistrar, srv MedSrvServer) {
	// If the following call pancis, it indicates UnimplementedMedSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedSrv_ServiceDesc, srv)
}

func _MedSrv_RegisterDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDoctorIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).RegisterDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_RegisterDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).RegisterDoctor(ctx, req.(*RegisterDoctorIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_GetDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).GetDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_GetDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).GetDoctor(ctx, req.(*GetDoctorIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_CreatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).CreatePatient(ctx, req.(*CreatePatientIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_GetPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).GetPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_GetPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).GetPatient(ctx, req.(*GetPatientIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_GetPatientsByDoctorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByDoctorIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).GetPatientsByDoctorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_GetPatientsByDoctorID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).GetPatientsByDoctorID(ctx, req.(*GetPatientsByDoctorIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_UpdatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).UpdatePatient(ctx, req.(*UpdatePatientIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).CreateCard(ctx, req.(*CreateCardIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).GetCard(ctx, req.(*GetCardIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedSrv_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedSrvServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedSrv_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedSrvServer).UpdateCard(ctx, req.(*UpdateCardIn))
	}
	return interceptor(ctx, in, info, handler)
}

// MedSrv_ServiceDesc is the grpc.ServiceDesc for MedSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MedSrv",
	HandlerType: (*MedSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerDoctor",
			Handler:    _MedSrv_RegisterDoctor_Handler,
		},
		{
			MethodName: "getDoctor",
			Handler:    _MedSrv_GetDoctor_Handler,
		},
		{
			MethodName: "createPatient",
			Handler:    _MedSrv_CreatePatient_Handler,
		},
		{
			MethodName: "getPatient",
			Handler:    _MedSrv_GetPatient_Handler,
		},
		{
			MethodName: "getPatientsByDoctorID",
			Handler:    _MedSrv_GetPatientsByDoctorID_Handler,
		},
		{
			MethodName: "updatePatient",
			Handler:    _MedSrv_UpdatePatient_Handler,
		},
		{
			MethodName: "createCard",
			Handler:    _MedSrv_CreateCard_Handler,
		},
		{
			MethodName: "getCard",
			Handler:    _MedSrv_GetCard_Handler,
		},
		{
			MethodName: "updateCard",
			Handler:    _MedSrv_UpdateCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc/clients/med.proto",
}
