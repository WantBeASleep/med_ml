// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/grpc/clients/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatSrv_CreateChat_FullMethodName     = "/ChatSrv/CreateChat"
	ChatSrv_GetChats_FullMethodName       = "/ChatSrv/GetChats"
	ChatSrv_GetChat_FullMethodName        = "/ChatSrv/GetChat"
	ChatSrv_GetChatHistory_FullMethodName = "/ChatSrv/GetChatHistory"
)

// ChatSrvClient is the client API for ChatSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatSrvClient interface {
	CreateChat(ctx context.Context, in *CreateChatIn, opts ...grpc.CallOption) (*CreateChatOut, error)
	GetChats(ctx context.Context, in *GetChatsIn, opts ...grpc.CallOption) (*GetChatsOut, error)
	GetChat(ctx context.Context, in *GetChatIn, opts ...grpc.CallOption) (*GetChatOut, error)
	GetChatHistory(ctx context.Context, in *GetChatHistoryIn, opts ...grpc.CallOption) (*GetChatHistoryOut, error)
}

type chatSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewChatSrvClient(cc grpc.ClientConnInterface) ChatSrvClient {
	return &chatSrvClient{cc}
}

func (c *chatSrvClient) CreateChat(ctx context.Context, in *CreateChatIn, opts ...grpc.CallOption) (*CreateChatOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatOut)
	err := c.cc.Invoke(ctx, ChatSrv_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSrvClient) GetChats(ctx context.Context, in *GetChatsIn, opts ...grpc.CallOption) (*GetChatsOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatsOut)
	err := c.cc.Invoke(ctx, ChatSrv_GetChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSrvClient) GetChat(ctx context.Context, in *GetChatIn, opts ...grpc.CallOption) (*GetChatOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatOut)
	err := c.cc.Invoke(ctx, ChatSrv_GetChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatSrvClient) GetChatHistory(ctx context.Context, in *GetChatHistoryIn, opts ...grpc.CallOption) (*GetChatHistoryOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatHistoryOut)
	err := c.cc.Invoke(ctx, ChatSrv_GetChatHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatSrvServer is the server API for ChatSrv service.
// All implementations must embed UnimplementedChatSrvServer
// for forward compatibility.
type ChatSrvServer interface {
	CreateChat(context.Context, *CreateChatIn) (*CreateChatOut, error)
	GetChats(context.Context, *GetChatsIn) (*GetChatsOut, error)
	GetChat(context.Context, *GetChatIn) (*GetChatOut, error)
	GetChatHistory(context.Context, *GetChatHistoryIn) (*GetChatHistoryOut, error)
	mustEmbedUnimplementedChatSrvServer()
}

// UnimplementedChatSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatSrvServer struct{}

func (UnimplementedChatSrvServer) CreateChat(context.Context, *CreateChatIn) (*CreateChatOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatSrvServer) GetChats(context.Context, *GetChatsIn) (*GetChatsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedChatSrvServer) GetChat(context.Context, *GetChatIn) (*GetChatOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedChatSrvServer) GetChatHistory(context.Context, *GetChatHistoryIn) (*GetChatHistoryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatHistory not implemented")
}
func (UnimplementedChatSrvServer) mustEmbedUnimplementedChatSrvServer() {}
func (UnimplementedChatSrvServer) testEmbeddedByValue()                 {}

// UnsafeChatSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatSrvServer will
// result in compilation errors.
type UnsafeChatSrvServer interface {
	mustEmbedUnimplementedChatSrvServer()
}

func RegisterChatSrvServer(s grpc.ServiceRegistrar, srv ChatSrvServer) {
	// If the following call pancis, it indicates UnimplementedChatSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatSrv_ServiceDesc, srv)
}

func _ChatSrv_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSrvServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatSrv_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSrvServer).CreateChat(ctx, req.(*CreateChatIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSrv_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSrvServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatSrv_GetChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSrvServer).GetChats(ctx, req.(*GetChatsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSrv_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSrvServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatSrv_GetChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSrvServer).GetChat(ctx, req.(*GetChatIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatSrv_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatHistoryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatSrvServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatSrv_GetChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatSrvServer).GetChatHistory(ctx, req.(*GetChatHistoryIn))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatSrv_ServiceDesc is the grpc.ServiceDesc for ChatSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatSrv",
	HandlerType: (*ChatSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatSrv_CreateChat_Handler,
		},
		{
			MethodName: "GetChats",
			Handler:    _ChatSrv_GetChats_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _ChatSrv_GetChat_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _ChatSrv_GetChatHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc/clients/chat.proto",
}
