syntax = "proto3";

option go_package = "internal/generated/grpc/clients/uzi";

import "google/protobuf/empty.proto";

service UziSrv {
  // DEVICE
  rpc createDevice(createDeviceIn) returns (createDeviceOut);
  rpc getDeviceList(google.protobuf.Empty) returns (GetDeviceListOut);

  // UZI
  rpc createUzi(CreateUziIn) returns (CreateUziOut);
  rpc getUziById(GetUziByIdIn) returns (GetUziByIdOut);
  rpc getUzisByExternalId(GetUzisByExternalIdIn) returns (GetUzisByExternalIdOut);
  rpc getUzisByAuthor(GetUzisByAuthorIn) returns (GetUzisByAuthorOut);
  rpc getEchographicByUziId(GetEchographicByUziIdIn) returns (GetEchographicByUziIdOut);
  rpc updateUzi(UpdateUziIn) returns (UpdateUziOut);
  rpc updateEchographic(UpdateEchographicIn) returns (UpdateEchographicOut);
  rpc deleteUzi(DeleteUziIn) returns (google.protobuf.Empty);

  // IMAGE
  rpc getImagesByUziId(GetImagesByUziIdIn) returns (GetImagesByUziIdOut);
  
  // NODE
  rpc getNodesByUziId(GetNodesByUziIdIn) returns (GetNodesByUziIdOut);
  rpc updateNode(UpdateNodeIn) returns (UpdateNodeOut);

  // SEGMENT
  rpc createSegment(CreateSegmentIn) returns (CreateSegmentOut);
  rpc getSegmentsByNodeId(GetSegmentsByNodeIdIn) returns (GetSegmentsByNodeIdOut);
  rpc updateSegment(UpdateSegmentIn) returns (UpdateSegmentOut);

  // доменные области слишком сильно пересекаются, вынесено в одну надобласть
  // NODE-SEGMENT
  rpc createNodeWithSegments(CreateNodeWithSegmentsIn) returns (CreateNodeWithSegmentsOut);
  rpc getNodesWithSegmentsByImageId(GetNodesWithSegmentsByImageIdIn)
      returns (GetNodesWithSegmentsByImageIdOut);
  rpc deleteNode(DeleteNodeIn) returns (google.protobuf.Empty);
  rpc deleteSegment(DeleteSegmentIn) returns (google.protobuf.Empty);
}


// DEVICE

message Device {
  int64 id = 100;
  string name = 200;
}

message createDeviceIn {
  string name = 100;
}

message createDeviceOut {
  int64 id = 100;
}

message GetDeviceListOut { repeated Device devices = 100; }

// UZI

enum UziStatus {
  UZI_STATUS_NEW = 0;
  UZI_STATUS_PENDING = 1;
  UZI_STATUS_COMPLETED = 2;
}

enum NodeValidation {
  NODE_VALIDATION_NULL = 0;
  NODE_VALIDATION_VALID = 1;
  NODE_VALIDATION_INVALID = 2;
}

enum UziProjection {
  UZI_PROJECTION_LONG = 0;
  UZI_PROJECTION_CROSS = 1;
}

message Uzi {
  string id = 100;
  UziProjection projection = 200;
  bool checked = 300;
  string external_id = 400;
  string author = 500;
  int64 device_id = 600;
  UziStatus status = 700;
  optional string description = 800;
  string create_at = 1000;
}

message Echographic {
  string id = 100;
  optional string contors = 200;
  optional double left_lobe_length = 300;
  optional double left_lobe_width = 400;
  optional double left_lobe_thick = 500;
  optional double left_lobe_volum = 600;
  optional double right_lobe_length = 700;
  optional double right_lobe_width = 800;
  optional double right_lobe_thick = 900;
  optional double right_lobe_volum = 1000;
  optional double gland_volum = 1100;
  optional double isthmus = 1200;
  optional string struct = 1300;
  optional string echogenicity = 1400;
  optional string regional_lymph = 1500;
  optional string vascularization = 1600;
  optional string location = 1700;
  optional string additional = 1800;
  optional string conclusion = 1900;
}

message CreateUziIn {
  UziProjection projection = 100;
  string external_id = 200;
  string author = 300;
  int64 device_id = 400;
  optional string description = 500;
}

message CreateUziOut { string id = 100; }

message GetUziByIdIn { string id = 100; }

message GetUziByIdOut { Uzi uzi = 100; }

message GetUzisByExternalIdIn {
  string external_id = 100;
}

message GetUzisByExternalIdOut {
  repeated Uzi uzis = 100;
}

message GetUzisByAuthorIn {
  string author = 100;
}

message GetUzisByAuthorOut {
  repeated Uzi uzis = 100;
}

message GetEchographicByUziIdIn { string uzi_id = 100; }

message GetEchographicByUziIdOut { Echographic echographic = 100; }

message UpdateUziIn {
  string id = 100;
  optional UziProjection projection = 200;
  optional bool checked = 300;
}

message UpdateUziOut { Uzi uzi = 100; }

message UpdateEchographicIn { Echographic echographic = 100; }

message UpdateEchographicOut { Echographic echographic = 100; }

message DeleteUziIn { string id = 100; }


// IMAGE

message Image {
  string id = 100;
  string uzi_id = 200;
  int64 page = 300;
};

message GetImagesByUziIdIn { string uzi_id = 100; }

message GetImagesByUziIdOut { repeated Image images = 100; }

// NODE

message Node {
  string id = 100;
  bool ai = 200;
  optional NodeValidation validation = 300;
  string uzi_id = 400;
  double tirads_23 = 500;
  double tirads_4 = 600;
  double tirads_5 = 700;
  optional string description = 800;
}

message GetNodesByUziIdIn{ string uzi_id = 100; };

message GetNodesByUziIdOut{
  repeated Node nodes = 100;
};

message UpdateNodeIn {
  string id = 100;
  optional NodeValidation validation = 200;
  optional double tirads_23 = 300;
  optional double tirads_4 = 400;
  optional double tirads_5 = 500;
}

message UpdateNodeOut { Node node = 100; }

// SEGMENT

message Segment {
  string id = 100;
  string image_id = 200;
  string node_id = 300;
  bytes contor = 400;
  bool ai = 500;
  double tirads_23 = 600;
  double tirads_4 = 700;
  double tirads_5 = 800;
}

message CreateSegmentIn {
  string image_id = 100;
  string node_id = 200;
  bytes contor = 300;
  double tirads_23 = 400;
  double tirads_4 = 500;
  double tirads_5 = 600;
}

message CreateSegmentOut { string id = 100; }

message GetSegmentsByNodeIdIn { string node_id = 100; }

message GetSegmentsByNodeIdOut { repeated Segment segments = 100; }

message UpdateSegmentIn {
  string id = 100;
  optional bytes contor = 200;
  optional double tirads_23 = 300;
  optional double tirads_4 = 400;
  optional double tirads_5 = 500;
}

message UpdateSegmentOut { Segment segment = 100; }

// IMAGE-SEGMENT-NODE

message CreateNodeWithSegmentsIn {
  message Node {
    double tirads_23 = 200;
    double tirads_4 = 300;
    double tirads_5 = 400;
    optional string description = 500;
  }
  message Segment {
    string image_id = 100;
    bytes contor = 200;
    double tirads_23 = 300;
    double tirads_4 = 400;
    double tirads_5 = 500;
  }

  string uzi_id = 100;
  Node node = 200;
  repeated Segment segments = 300;
}

message CreateNodeWithSegmentsOut { 
  string node_id = 100;
  repeated string segment_ids = 200;
}


message GetNodesWithSegmentsByImageIdIn { string id = 100; }

message GetNodesWithSegmentsByImageIdOut {
  repeated Node nodes = 100;
  repeated Segment segments = 200;
}

message DeleteNodeIn { string id = 100; }

message DeleteSegmentIn { string id = 100; }