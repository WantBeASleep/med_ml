// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/grpc/service.proto

package service

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BillingService_GetTariffPlanByID_FullMethodName           = "/billing.grpc.BillingService/GetTariffPlanByID"
	BillingService_ListTariffPlans_FullMethodName             = "/billing.grpc.BillingService/ListTariffPlans"
	BillingService_PurchaseSubscription_FullMethodName        = "/billing.grpc.BillingService/PurchaseSubscription"
	BillingService_IsUserHasActiveSubscription_FullMethodName = "/billing.grpc.BillingService/IsUserHasActiveSubscription"
	BillingService_GetUserActiveSubscription_FullMethodName   = "/billing.grpc.BillingService/GetUserActiveSubscription"
	BillingService_ListPaymentProviders_FullMethodName        = "/billing.grpc.BillingService/ListPaymentProviders"
	BillingService_HandleYookassaWebhook_FullMethodName       = "/billing.grpc.BillingService/HandleYookassaWebhook"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	// Tariff Plan
	GetTariffPlanByID(ctx context.Context, in *GetTariffPlanByIDIn, opts ...grpc.CallOption) (*GetTariffPlanByIDOut, error)
	ListTariffPlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTariffPlansOut, error)
	// Subscription
	PurchaseSubscription(ctx context.Context, in *PurchaseSubscriptionIn, opts ...grpc.CallOption) (*PurchaseSubscriptionOut, error)
	IsUserHasActiveSubscription(ctx context.Context, in *IsUserHasActiveSubscriptionIn, opts ...grpc.CallOption) (*IsUserHasActiveSubscriptionOut, error)
	GetUserActiveSubscription(ctx context.Context, in *GetUserActiveSubscriptionIn, opts ...grpc.CallOption) (*GetUserActiveSubscriptionOut, error)
	// Payment Provider
	ListPaymentProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPaymentProvidersOut, error)
	// Yookassa Webhook
	HandleYookassaWebhook(ctx context.Context, in *YookassaWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetTariffPlanByID(ctx context.Context, in *GetTariffPlanByIDIn, opts ...grpc.CallOption) (*GetTariffPlanByIDOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTariffPlanByIDOut)
	err := c.cc.Invoke(ctx, BillingService_GetTariffPlanByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListTariffPlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTariffPlansOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTariffPlansOut)
	err := c.cc.Invoke(ctx, BillingService_ListTariffPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) PurchaseSubscription(ctx context.Context, in *PurchaseSubscriptionIn, opts ...grpc.CallOption) (*PurchaseSubscriptionOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseSubscriptionOut)
	err := c.cc.Invoke(ctx, BillingService_PurchaseSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) IsUserHasActiveSubscription(ctx context.Context, in *IsUserHasActiveSubscriptionIn, opts ...grpc.CallOption) (*IsUserHasActiveSubscriptionOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsUserHasActiveSubscriptionOut)
	err := c.cc.Invoke(ctx, BillingService_IsUserHasActiveSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetUserActiveSubscription(ctx context.Context, in *GetUserActiveSubscriptionIn, opts ...grpc.CallOption) (*GetUserActiveSubscriptionOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActiveSubscriptionOut)
	err := c.cc.Invoke(ctx, BillingService_GetUserActiveSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListPaymentProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPaymentProvidersOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentProvidersOut)
	err := c.cc.Invoke(ctx, BillingService_ListPaymentProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) HandleYookassaWebhook(ctx context.Context, in *YookassaWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BillingService_HandleYookassaWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility.
type BillingServiceServer interface {
	// Tariff Plan
	GetTariffPlanByID(context.Context, *GetTariffPlanByIDIn) (*GetTariffPlanByIDOut, error)
	ListTariffPlans(context.Context, *emptypb.Empty) (*ListTariffPlansOut, error)
	// Subscription
	PurchaseSubscription(context.Context, *PurchaseSubscriptionIn) (*PurchaseSubscriptionOut, error)
	IsUserHasActiveSubscription(context.Context, *IsUserHasActiveSubscriptionIn) (*IsUserHasActiveSubscriptionOut, error)
	GetUserActiveSubscription(context.Context, *GetUserActiveSubscriptionIn) (*GetUserActiveSubscriptionOut, error)
	// Payment Provider
	ListPaymentProviders(context.Context, *emptypb.Empty) (*ListPaymentProvidersOut, error)
	// Yookassa Webhook
	HandleYookassaWebhook(context.Context, *YookassaWebhookRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBillingServiceServer struct{}

func (UnimplementedBillingServiceServer) GetTariffPlanByID(context.Context, *GetTariffPlanByIDIn) (*GetTariffPlanByIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariffPlanByID not implemented")
}
func (UnimplementedBillingServiceServer) ListTariffPlans(context.Context, *emptypb.Empty) (*ListTariffPlansOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTariffPlans not implemented")
}
func (UnimplementedBillingServiceServer) PurchaseSubscription(context.Context, *PurchaseSubscriptionIn) (*PurchaseSubscriptionOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseSubscription not implemented")
}
func (UnimplementedBillingServiceServer) IsUserHasActiveSubscription(context.Context, *IsUserHasActiveSubscriptionIn) (*IsUserHasActiveSubscriptionOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserHasActiveSubscription not implemented")
}
func (UnimplementedBillingServiceServer) GetUserActiveSubscription(context.Context, *GetUserActiveSubscriptionIn) (*GetUserActiveSubscriptionOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActiveSubscription not implemented")
}
func (UnimplementedBillingServiceServer) ListPaymentProviders(context.Context, *emptypb.Empty) (*ListPaymentProvidersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentProviders not implemented")
}
func (UnimplementedBillingServiceServer) HandleYookassaWebhook(context.Context, *YookassaWebhookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleYookassaWebhook not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}
func (UnimplementedBillingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBillingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_GetTariffPlanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTariffPlanByIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetTariffPlanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetTariffPlanByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetTariffPlanByID(ctx, req.(*GetTariffPlanByIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListTariffPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListTariffPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListTariffPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListTariffPlans(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_PurchaseSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseSubscriptionIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).PurchaseSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_PurchaseSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).PurchaseSubscription(ctx, req.(*PurchaseSubscriptionIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_IsUserHasActiveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserHasActiveSubscriptionIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).IsUserHasActiveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_IsUserHasActiveSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).IsUserHasActiveSubscription(ctx, req.(*IsUserHasActiveSubscriptionIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetUserActiveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActiveSubscriptionIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetUserActiveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetUserActiveSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetUserActiveSubscription(ctx, req.(*GetUserActiveSubscriptionIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListPaymentProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListPaymentProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListPaymentProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListPaymentProviders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_HandleYookassaWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YookassaWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).HandleYookassaWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_HandleYookassaWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).HandleYookassaWebhook(ctx, req.(*YookassaWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.grpc.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTariffPlanByID",
			Handler:    _BillingService_GetTariffPlanByID_Handler,
		},
		{
			MethodName: "ListTariffPlans",
			Handler:    _BillingService_ListTariffPlans_Handler,
		},
		{
			MethodName: "PurchaseSubscription",
			Handler:    _BillingService_PurchaseSubscription_Handler,
		},
		{
			MethodName: "IsUserHasActiveSubscription",
			Handler:    _BillingService_IsUserHasActiveSubscription_Handler,
		},
		{
			MethodName: "GetUserActiveSubscription",
			Handler:    _BillingService_GetUserActiveSubscription_Handler,
		},
		{
			MethodName: "ListPaymentProviders",
			Handler:    _BillingService_ListPaymentProviders_Handler,
		},
		{
			MethodName: "HandleYookassaWebhook",
			Handler:    _BillingService_HandleYookassaWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc/service.proto",
}
