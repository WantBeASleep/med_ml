// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: med.proto

package med

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Patient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName     string `protobuf:"bytes,2,opt,name=first_name,proto3" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,3,opt,name=last_name,proto3" json:"last_name,omitempty"`
	FatherName    string `protobuf:"bytes,4,opt,name=father_name,proto3" json:"father_name,omitempty"`
	MedicalPolicy string `protobuf:"bytes,5,opt,name=medical_policy,proto3" json:"medical_policy,omitempty"`
	Email         string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"` // Email с валидацией по формату
	IsActive      bool   `protobuf:"varint,7,opt,name=is_active,proto3" json:"is_active,omitempty"`
}

func (x *Patient) Reset() {
	*x = Patient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient) ProtoMessage() {}

func (x *Patient) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient.ProtoReflect.Descriptor instead.
func (*Patient) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{0}
}

func (x *Patient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Patient) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Patient) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Patient) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *Patient) GetMedicalPolicy() string {
	if x != nil {
		return x.MedicalPolicy
	}
	return ""
}

func (x *Patient) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Patient) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppointmentTime string `protobuf:"bytes,2,opt,name=appointment_time,proto3" json:"appointment_time,omitempty"`
	HasNodules      bool   `protobuf:"varint,3,opt,name=has_nodules,proto3" json:"has_nodules,omitempty"`
	Diagnosis       string `protobuf:"bytes,4,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	MedWorkerId     string `protobuf:"bytes,5,opt,name=med_worker_id,proto3" json:"med_worker_id,omitempty"`
	PatientId       string `protobuf:"bytes,6,opt,name=patient_id,proto3" json:"patient_id,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{1}
}

func (x *Card) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Card) GetAppointmentTime() string {
	if x != nil {
		return x.AppointmentTime
	}
	return ""
}

func (x *Card) GetHasNodules() bool {
	if x != nil {
		return x.HasNodules
	}
	return false
}

func (x *Card) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *Card) GetMedWorkerId() string {
	if x != nil {
		return x.MedWorkerId
	}
	return ""
}

func (x *Card) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

type CreatePatientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *CreatePatientRequest) Reset() {
	*x = CreatePatientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePatientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePatientRequest) ProtoMessage() {}

func (x *CreatePatientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePatientRequest.ProtoReflect.Descriptor instead.
func (*CreatePatientRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePatientRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

type PatientListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patients []*Patient `protobuf:"bytes,1,rep,name=patients,proto3" json:"patients,omitempty"`
}

func (x *PatientListResponse) Reset() {
	*x = PatientListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientListResponse) ProtoMessage() {}

func (x *PatientListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientListResponse.ProtoReflect.Descriptor instead.
func (*PatientListResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{3}
}

func (x *PatientListResponse) GetPatients() []*Patient {
	if x != nil {
		return x.Patients
	}
	return nil
}

type PatientInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PatientInfoRequest) Reset() {
	*x = PatientInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientInfoRequest) ProtoMessage() {}

func (x *PatientInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientInfoRequest.ProtoReflect.Descriptor instead.
func (*PatientInfoRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{4}
}

func (x *PatientInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PatientInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *PatientInfoResponse) Reset() {
	*x = PatientInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientInfoResponse) ProtoMessage() {}

func (x *PatientInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientInfoResponse.ProtoReflect.Descriptor instead.
func (*PatientInfoResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{5}
}

func (x *PatientInfoResponse) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

type PatientUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *PatientUpdateRequest) Reset() {
	*x = PatientUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUpdateRequest) ProtoMessage() {}

func (x *PatientUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUpdateRequest.ProtoReflect.Descriptor instead.
func (*PatientUpdateRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{6}
}

func (x *PatientUpdateRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

type MedWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LastName        string `protobuf:"bytes,2,opt,name=last_name,proto3" json:"last_name,omitempty"`
	FirstName       string `protobuf:"bytes,3,opt,name=first_name,proto3" json:"first_name,omitempty"`
	FathersName     string `protobuf:"bytes,4,opt,name=fathers_name,proto3" json:"fathers_name,omitempty"`
	MedOrganization string `protobuf:"bytes,5,opt,name=med_organization,proto3" json:"med_organization,omitempty"`
	Job             string `protobuf:"bytes,6,opt,name=job,proto3" json:"job,omitempty"`
	IsRemoteWorker  bool   `protobuf:"varint,7,opt,name=is_remote_worker,proto3" json:"is_remote_worker,omitempty"`
	ExpertDetails   string `protobuf:"bytes,8,opt,name=expert_details,proto3" json:"expert_details,omitempty"`
}

func (x *MedWorker) Reset() {
	*x = MedWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedWorker) ProtoMessage() {}

func (x *MedWorker) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedWorker.ProtoReflect.Descriptor instead.
func (*MedWorker) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{7}
}

func (x *MedWorker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedWorker) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *MedWorker) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *MedWorker) GetFathersName() string {
	if x != nil {
		return x.FathersName
	}
	return ""
}

func (x *MedWorker) GetMedOrganization() string {
	if x != nil {
		return x.MedOrganization
	}
	return ""
}

func (x *MedWorker) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *MedWorker) GetIsRemoteWorker() bool {
	if x != nil {
		return x.IsRemoteWorker
	}
	return false
}

func (x *MedWorker) GetExpertDetails() string {
	if x != nil {
		return x.ExpertDetails
	}
	return ""
}

type GetMedworkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string id = 1 [json_name = "id",
	// (buf.validate.field).required = true
	// ];
	// string first_name = 2 [json_name = "first_name",
	// (buf.validate.field).required = true
	// ];
	// string fathers_name = 3 [json_name = "fathers_name",
	// (buf.validate.field).required = true
	// ];
	// string last_name = 4 [json_name = "last_name",
	// (buf.validate.field).required = true
	// ];
	// bool is_remote_worker = 5 [json_name = "is_remote_worker",
	// (buf.validate.field).required = true
	// ];
	// string email = 6 [json_name = "email",
	// (buf.validate.field).required = true
	// ];
	Limit  uint64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetMedworkerRequest) Reset() {
	*x = GetMedworkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedworkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedworkerRequest) ProtoMessage() {}

func (x *GetMedworkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedworkerRequest.ProtoReflect.Descriptor instead.
func (*GetMedworkerRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{8}
}

func (x *GetMedworkerRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMedworkerRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetMedworkerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint64       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Next     string       `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	Previous string       `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
	Results  []*MedWorker `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetMedworkerListResponse) Reset() {
	*x = GetMedworkerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedworkerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedworkerListResponse) ProtoMessage() {}

func (x *GetMedworkerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedworkerListResponse.ProtoReflect.Descriptor instead.
func (*GetMedworkerListResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{9}
}

func (x *GetMedworkerListResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetMedworkerListResponse) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *GetMedworkerListResponse) GetPrevious() string {
	if x != nil {
		return x.Previous
	}
	return ""
}

func (x *GetMedworkerListResponse) GetResults() []*MedWorker {
	if x != nil {
		return x.Results
	}
	return nil
}

type UpdateMedWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName       string `protobuf:"bytes,2,opt,name=first_name,proto3" json:"first_name,omitempty"`
	FathersName     string `protobuf:"bytes,3,opt,name=fathers_name,proto3" json:"fathers_name,omitempty"`
	LastName        string `protobuf:"bytes,4,opt,name=last_name,proto3" json:"last_name,omitempty"`
	MedOrganization string `protobuf:"bytes,5,opt,name=med_organization,proto3" json:"med_organization,omitempty"`
	Job             string `protobuf:"bytes,6,opt,name=job,proto3" json:"job,omitempty"`
	IsRemoteWorker  bool   `protobuf:"varint,7,opt,name=is_remote_worker,proto3" json:"is_remote_worker,omitempty"`
	ExpertDetails   string `protobuf:"bytes,8,opt,name=expert_details,proto3" json:"expert_details,omitempty"`
}

func (x *UpdateMedWorkerRequest) Reset() {
	*x = UpdateMedWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedWorkerRequest) ProtoMessage() {}

func (x *UpdateMedWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedWorkerRequest.ProtoReflect.Descriptor instead.
func (*UpdateMedWorkerRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateMedWorkerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMedWorkerRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateMedWorkerRequest) GetFathersName() string {
	if x != nil {
		return x.FathersName
	}
	return ""
}

func (x *UpdateMedWorkerRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateMedWorkerRequest) GetMedOrganization() string {
	if x != nil {
		return x.MedOrganization
	}
	return ""
}

func (x *UpdateMedWorkerRequest) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *UpdateMedWorkerRequest) GetIsRemoteWorker() bool {
	if x != nil {
		return x.IsRemoteWorker
	}
	return false
}

func (x *UpdateMedWorkerRequest) GetExpertDetails() string {
	if x != nil {
		return x.ExpertDetails
	}
	return ""
}

type UpdateMedWorkerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Worker *MedWorker `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (x *UpdateMedWorkerResponse) Reset() {
	*x = UpdateMedWorkerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedWorkerResponse) ProtoMessage() {}

func (x *UpdateMedWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedWorkerResponse.ProtoReflect.Descriptor instead.
func (*UpdateMedWorkerResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMedWorkerResponse) GetWorker() *MedWorker {
	if x != nil {
		return x.Worker
	}
	return nil
}

type GetMedMedWorkerByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMedMedWorkerByIDRequest) Reset() {
	*x = GetMedMedWorkerByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedMedWorkerByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedMedWorkerByIDRequest) ProtoMessage() {}

func (x *GetMedMedWorkerByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedMedWorkerByIDRequest.ProtoReflect.Descriptor instead.
func (*GetMedMedWorkerByIDRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{12}
}

func (x *GetMedMedWorkerByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetMedWorkerByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Worker *MedWorker `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (x *GetMedWorkerByIDResponse) Reset() {
	*x = GetMedWorkerByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedWorkerByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedWorkerByIDResponse) ProtoMessage() {}

func (x *GetMedWorkerByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedWorkerByIDResponse.ProtoReflect.Descriptor instead.
func (*GetMedWorkerByIDResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{13}
}

func (x *GetMedWorkerByIDResponse) GetWorker() *MedWorker {
	if x != nil {
		return x.Worker
	}
	return nil
}

// TODO: Валидация
type PatchMedWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName       string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	FathersName     string `protobuf:"bytes,3,opt,name=fathers_name,json=fathersName,proto3" json:"fathers_name,omitempty"`
	LastName        string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	MedOrganization string `protobuf:"bytes,5,opt,name=med_organization,json=medOrganization,proto3" json:"med_organization,omitempty"`
	Job             string `protobuf:"bytes,6,opt,name=job,proto3" json:"job,omitempty"`
	IsRemoteWorker  bool   `protobuf:"varint,7,opt,name=is_remote_worker,json=isRemoteWorker,proto3" json:"is_remote_worker,omitempty"`
	ExpertDetails   string `protobuf:"bytes,8,opt,name=expert_details,json=expertDetails,proto3" json:"expert_details,omitempty"`
}

func (x *PatchMedWorkerRequest) Reset() {
	*x = PatchMedWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMedWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMedWorkerRequest) ProtoMessage() {}

func (x *PatchMedWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMedWorkerRequest.ProtoReflect.Descriptor instead.
func (*PatchMedWorkerRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{14}
}

func (x *PatchMedWorkerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchMedWorkerRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PatchMedWorkerRequest) GetFathersName() string {
	if x != nil {
		return x.FathersName
	}
	return ""
}

func (x *PatchMedWorkerRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PatchMedWorkerRequest) GetMedOrganization() string {
	if x != nil {
		return x.MedOrganization
	}
	return ""
}

func (x *PatchMedWorkerRequest) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *PatchMedWorkerRequest) GetIsRemoteWorker() bool {
	if x != nil {
		return x.IsRemoteWorker
	}
	return false
}

func (x *PatchMedWorkerRequest) GetExpertDetails() string {
	if x != nil {
		return x.ExpertDetails
	}
	return ""
}

type AddMedWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName       string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	FathersName     string `protobuf:"bytes,2,opt,name=fathers_name,json=fathersName,proto3" json:"fathers_name,omitempty"`
	LastName        string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	MedOrganization string `protobuf:"bytes,4,opt,name=med_organization,json=medOrganization,proto3" json:"med_organization,omitempty"`
	Job             string `protobuf:"bytes,5,opt,name=job,proto3" json:"job,omitempty"`
	IsRemoteWorker  bool   `protobuf:"varint,6,opt,name=is_remote_worker,json=isRemoteWorker,proto3" json:"is_remote_worker,omitempty"`
	ExpertDetails   string `protobuf:"bytes,7,opt,name=expert_details,json=expertDetails,proto3" json:"expert_details,omitempty"`
}

func (x *AddMedWorkerRequest) Reset() {
	*x = AddMedWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMedWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMedWorkerRequest) ProtoMessage() {}

func (x *AddMedWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMedWorkerRequest.ProtoReflect.Descriptor instead.
func (*AddMedWorkerRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{15}
}

func (x *AddMedWorkerRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AddMedWorkerRequest) GetFathersName() string {
	if x != nil {
		return x.FathersName
	}
	return ""
}

func (x *AddMedWorkerRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AddMedWorkerRequest) GetMedOrganization() string {
	if x != nil {
		return x.MedOrganization
	}
	return ""
}

func (x *AddMedWorkerRequest) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *AddMedWorkerRequest) GetIsRemoteWorker() bool {
	if x != nil {
		return x.IsRemoteWorker
	}
	return false
}

func (x *AddMedWorkerRequest) GetExpertDetails() string {
	if x != nil {
		return x.ExpertDetails
	}
	return ""
}

type AddMedWorkerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Worker *MedWorker `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (x *AddMedWorkerResponse) Reset() {
	*x = AddMedWorkerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMedWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMedWorkerResponse) ProtoMessage() {}

func (x *AddMedWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMedWorkerResponse.ProtoReflect.Descriptor instead.
func (*AddMedWorkerResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{16}
}

func (x *AddMedWorkerResponse) GetWorker() *MedWorker {
	if x != nil {
		return x.Worker
	}
	return nil
}

type GetPatientsByMedWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedWorkerId string `protobuf:"bytes,1,opt,name=medWorkerId,proto3" json:"medWorkerId,omitempty"`
}

func (x *GetPatientsByMedWorkerRequest) Reset() {
	*x = GetPatientsByMedWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPatientsByMedWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientsByMedWorkerRequest) ProtoMessage() {}

func (x *GetPatientsByMedWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientsByMedWorkerRequest.ProtoReflect.Descriptor instead.
func (*GetPatientsByMedWorkerRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{17}
}

func (x *GetPatientsByMedWorkerRequest) GetMedWorkerId() string {
	if x != nil {
		return x.MedWorkerId
	}
	return ""
}

type GetPatientsByMedWorkerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards       []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	MedWorkerId string  `protobuf:"bytes,2,opt,name=med_worker_id,proto3" json:"med_worker_id,omitempty"`
}

func (x *GetPatientsByMedWorkerResponse) Reset() {
	*x = GetPatientsByMedWorkerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPatientsByMedWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientsByMedWorkerResponse) ProtoMessage() {}

func (x *GetPatientsByMedWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientsByMedWorkerResponse.ProtoReflect.Descriptor instead.
func (*GetPatientsByMedWorkerResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{18}
}

func (x *GetPatientsByMedWorkerResponse) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *GetPatientsByMedWorkerResponse) GetMedWorkerId() string {
	if x != nil {
		return x.MedWorkerId
	}
	return ""
}

type GetCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint64 id = 1;
	// string acceptance_datetime = 2;
	// bool has_nodules = 3;
	// string diagnosis = 4;
	// uint64 patient_id = 5;
	// uint64 medworker_id = 6;
	Limit  uint64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetCardsRequest) Reset() {
	*x = GetCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardsRequest) ProtoMessage() {}

func (x *GetCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardsRequest.ProtoReflect.Descriptor instead.
func (*GetCardsRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{19}
}

func (x *GetCardsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCardsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Next     string  `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	Previous string  `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
	Results  []*Card `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetCardsResponse) Reset() {
	*x = GetCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardsResponse) ProtoMessage() {}

func (x *GetCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardsResponse.ProtoReflect.Descriptor instead.
func (*GetCardsResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{20}
}

func (x *GetCardsResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetCardsResponse) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *GetCardsResponse) GetPrevious() string {
	if x != nil {
		return x.Previous
	}
	return ""
}

func (x *GetCardsResponse) GetResults() []*Card {
	if x != nil {
		return x.Results
	}
	return nil
}

type PostCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasNodules  bool   `protobuf:"varint,1,opt,name=has_nodules,proto3" json:"has_nodules,omitempty"`
	Diagnosis   string `protobuf:"bytes,2,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	PatientId   string `protobuf:"bytes,3,opt,name=patient_id,proto3" json:"patient_id,omitempty"`
	MedworkerId string `protobuf:"bytes,4,opt,name=medworker_id,proto3" json:"medworker_id,omitempty"`
}

func (x *PostCardRequest) Reset() {
	*x = PostCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCardRequest) ProtoMessage() {}

func (x *PostCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCardRequest.ProtoReflect.Descriptor instead.
func (*PostCardRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{21}
}

func (x *PostCardRequest) GetHasNodules() bool {
	if x != nil {
		return x.HasNodules
	}
	return false
}

func (x *PostCardRequest) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *PostCardRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PostCardRequest) GetMedworkerId() string {
	if x != nil {
		return x.MedworkerId
	}
	return ""
}

type PostCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postcard *Card `protobuf:"bytes,1,opt,name=postcard,proto3" json:"postcard,omitempty"`
}

func (x *PostCardResponse) Reset() {
	*x = PostCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCardResponse) ProtoMessage() {}

func (x *PostCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCardResponse.ProtoReflect.Descriptor instead.
func (*PostCardResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{22}
}

func (x *PostCardResponse) GetPostcard() *Card {
	if x != nil {
		return x.Postcard
	}
	return nil
}

type GetCardByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCardByIDRequest) Reset() {
	*x = GetCardByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardByIDRequest) ProtoMessage() {}

func (x *GetCardByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCardByIDRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{23}
}

func (x *GetCardByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCardByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postcard *Card `protobuf:"bytes,1,opt,name=postcard,proto3" json:"postcard,omitempty"`
}

func (x *GetCardByIDResponse) Reset() {
	*x = GetCardByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardByIDResponse) ProtoMessage() {}

func (x *GetCardByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardByIDResponse.ProtoReflect.Descriptor instead.
func (*GetCardByIDResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{24}
}

func (x *GetCardByIDResponse) GetPostcard() *Card {
	if x != nil {
		return x.Postcard
	}
	return nil
}

type PutCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HasNodules  bool   `protobuf:"varint,2,opt,name=has_nodules,proto3" json:"has_nodules,omitempty"`
	Diagnosis   string `protobuf:"bytes,3,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	PatientId   string `protobuf:"bytes,4,opt,name=patient_id,proto3" json:"patient_id,omitempty"`
	MedworkerId string `protobuf:"bytes,5,opt,name=medworker_id,proto3" json:"medworker_id,omitempty"`
}

func (x *PutCardRequest) Reset() {
	*x = PutCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCardRequest) ProtoMessage() {}

func (x *PutCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCardRequest.ProtoReflect.Descriptor instead.
func (*PutCardRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{25}
}

func (x *PutCardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutCardRequest) GetHasNodules() bool {
	if x != nil {
		return x.HasNodules
	}
	return false
}

func (x *PutCardRequest) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *PutCardRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PutCardRequest) GetMedworkerId() string {
	if x != nil {
		return x.MedworkerId
	}
	return ""
}

type PutCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postcard *Card `protobuf:"bytes,1,opt,name=postcard,proto3" json:"postcard,omitempty"`
}

func (x *PutCardResponse) Reset() {
	*x = PutCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCardResponse) ProtoMessage() {}

func (x *PutCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCardResponse.ProtoReflect.Descriptor instead.
func (*PutCardResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{26}
}

func (x *PutCardResponse) GetPostcard() *Card {
	if x != nil {
		return x.Postcard
	}
	return nil
}

type PatchCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HasNodules  bool     `protobuf:"varint,2,opt,name=has_nodules,proto3" json:"has_nodules,omitempty"`
	Diagnosis   string   `protobuf:"bytes,3,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	Patient     *Patient `protobuf:"bytes,4,opt,name=patient,proto3" json:"patient,omitempty"`
	MedworkerId string   `protobuf:"bytes,5,opt,name=medworker_id,proto3" json:"medworker_id,omitempty"`
}

func (x *PatchCardRequest) Reset() {
	*x = PatchCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCardRequest) ProtoMessage() {}

func (x *PatchCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCardRequest.ProtoReflect.Descriptor instead.
func (*PatchCardRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{27}
}

func (x *PatchCardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchCardRequest) GetHasNodules() bool {
	if x != nil {
		return x.HasNodules
	}
	return false
}

func (x *PatchCardRequest) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *PatchCardRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *PatchCardRequest) GetMedworkerId() string {
	if x != nil {
		return x.MedworkerId
	}
	return ""
}

type PatchCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postcard *Card `protobuf:"bytes,1,opt,name=postcard,proto3" json:"postcard,omitempty"`
}

func (x *PatchCardResponse) Reset() {
	*x = PatchCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCardResponse) ProtoMessage() {}

func (x *PatchCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCardResponse.ProtoReflect.Descriptor instead.
func (*PatchCardResponse) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{28}
}

func (x *PatchCardResponse) GetPostcard() *Card {
	if x != nil {
		return x.Postcard
	}
	return nil
}

type DeleteCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCardRequest) Reset() {
	*x = DeleteCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_med_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCardRequest) ProtoMessage() {}

func (x *DeleteCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_med_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCardRequest) Descriptor() ([]byte, []int) {
	return file_med_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteCardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_med_proto protoreflect.FileDescriptor

var file_med_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x79, 0x69, 0x72,
	0x2e, 0x6d, 0x65, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x02, 0x0a,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xf8, 0x01, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x09, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x12, 0x2c, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x13, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x2c, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41,
	0x0a, 0x13, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64,
	0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0x42, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x69, 0x72,
	0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8e, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xdc, 0x02,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x6d, 0x65,
	0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x6d, 0x65,
	0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x45, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65,
	0x64, 0x2e, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x46, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65,
	0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x82, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6a, 0x6f, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x42, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x68, 0x61,
	0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x3d,
	0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x22, 0x2c, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x22, 0xcc, 0x01,
	0x0a, 0x0e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f,
	0x6e, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0f,
	0x50, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6e,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d,
	0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x3e, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x22,
	0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x32, 0xcb, 0x04, 0x0a,
	0x07, 0x4d, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x5c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18, 0x2e,
	0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65,
	0x64, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f,
	0x6d, 0x65, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x63, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1b,
	0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x69,
	0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x62, 0x79, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5e, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x17, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d,
	0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f,
	0x6d, 0x65, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x63, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x19, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x79,
	0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x32, 0x14, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5f, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65,
	0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0xe6, 0x05, 0x0a, 0x0a, 0x4d,
	0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x69, 0x72,
	0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d,
	0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d,
	0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x69, 0x72, 0x2e,
	0x6d, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d,
	0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2f, 0x62, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x75, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x79, 0x69, 0x72,
	0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x69, 0x72,
	0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x32, 0x16, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x6a, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12,
	0x22, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x32, 0xba, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x22, 0x13, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x1b, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x79, 0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79,
	0x69, 0x72, 0x2e, 0x6d, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20,
	0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x7b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d,
	0x42, 0x11, 0x5a, 0x0f, 0x79, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x3b,
	0x6d, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_med_proto_rawDescOnce sync.Once
	file_med_proto_rawDescData = file_med_proto_rawDesc
)

func file_med_proto_rawDescGZIP() []byte {
	file_med_proto_rawDescOnce.Do(func() {
		file_med_proto_rawDescData = protoimpl.X.CompressGZIP(file_med_proto_rawDescData)
	})
	return file_med_proto_rawDescData
}

var file_med_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_med_proto_goTypes = []any{
	(*Patient)(nil),                        // 0: yir.med.Patient
	(*Card)(nil),                           // 1: yir.med.Card
	(*CreatePatientRequest)(nil),           // 2: yir.med.CreatePatientRequest
	(*PatientListResponse)(nil),            // 3: yir.med.PatientListResponse
	(*PatientInfoRequest)(nil),             // 4: yir.med.PatientInfoRequest
	(*PatientInfoResponse)(nil),            // 5: yir.med.PatientInfoResponse
	(*PatientUpdateRequest)(nil),           // 6: yir.med.PatientUpdateRequest
	(*MedWorker)(nil),                      // 7: yir.med.MedWorker
	(*GetMedworkerRequest)(nil),            // 8: yir.med.GetMedworkerRequest
	(*GetMedworkerListResponse)(nil),       // 9: yir.med.GetMedworkerListResponse
	(*UpdateMedWorkerRequest)(nil),         // 10: yir.med.UpdateMedWorkerRequest
	(*UpdateMedWorkerResponse)(nil),        // 11: yir.med.UpdateMedWorkerResponse
	(*GetMedMedWorkerByIDRequest)(nil),     // 12: yir.med.GetMedMedWorkerByIDRequest
	(*GetMedWorkerByIDResponse)(nil),       // 13: yir.med.GetMedWorkerByIDResponse
	(*PatchMedWorkerRequest)(nil),          // 14: yir.med.PatchMedWorkerRequest
	(*AddMedWorkerRequest)(nil),            // 15: yir.med.AddMedWorkerRequest
	(*AddMedWorkerResponse)(nil),           // 16: yir.med.AddMedWorkerResponse
	(*GetPatientsByMedWorkerRequest)(nil),  // 17: yir.med.GetPatientsByMedWorkerRequest
	(*GetPatientsByMedWorkerResponse)(nil), // 18: yir.med.GetPatientsByMedWorkerResponse
	(*GetCardsRequest)(nil),                // 19: yir.med.GetCardsRequest
	(*GetCardsResponse)(nil),               // 20: yir.med.GetCardsResponse
	(*PostCardRequest)(nil),                // 21: yir.med.PostCardRequest
	(*PostCardResponse)(nil),               // 22: yir.med.PostCardResponse
	(*GetCardByIDRequest)(nil),             // 23: yir.med.GetCardByIDRequest
	(*GetCardByIDResponse)(nil),            // 24: yir.med.GetCardByIDResponse
	(*PutCardRequest)(nil),                 // 25: yir.med.PutCardRequest
	(*PutCardResponse)(nil),                // 26: yir.med.PutCardResponse
	(*PatchCardRequest)(nil),               // 27: yir.med.PatchCardRequest
	(*PatchCardResponse)(nil),              // 28: yir.med.PatchCardResponse
	(*DeleteCardRequest)(nil),              // 29: yir.med.DeleteCardRequest
	(*empty.Empty)(nil),                    // 30: google.protobuf.Empty
}
var file_med_proto_depIdxs = []int32{
	0,  // 0: yir.med.CreatePatientRequest.patient:type_name -> yir.med.Patient
	0,  // 1: yir.med.PatientListResponse.patients:type_name -> yir.med.Patient
	0,  // 2: yir.med.PatientInfoResponse.patient:type_name -> yir.med.Patient
	0,  // 3: yir.med.PatientUpdateRequest.patient:type_name -> yir.med.Patient
	7,  // 4: yir.med.GetMedworkerListResponse.results:type_name -> yir.med.MedWorker
	7,  // 5: yir.med.UpdateMedWorkerResponse.worker:type_name -> yir.med.MedWorker
	7,  // 6: yir.med.GetMedWorkerByIDResponse.worker:type_name -> yir.med.MedWorker
	7,  // 7: yir.med.AddMedWorkerResponse.worker:type_name -> yir.med.MedWorker
	1,  // 8: yir.med.GetPatientsByMedWorkerResponse.cards:type_name -> yir.med.Card
	1,  // 9: yir.med.GetCardsResponse.results:type_name -> yir.med.Card
	1,  // 10: yir.med.PostCardResponse.postcard:type_name -> yir.med.Card
	1,  // 11: yir.med.GetCardByIDResponse.postcard:type_name -> yir.med.Card
	1,  // 12: yir.med.PutCardResponse.postcard:type_name -> yir.med.Card
	0,  // 13: yir.med.PatchCardRequest.patient:type_name -> yir.med.Patient
	1,  // 14: yir.med.PatchCardResponse.postcard:type_name -> yir.med.Card
	19, // 15: yir.med.MedCard.GetCards:input_type -> yir.med.GetCardsRequest
	21, // 16: yir.med.MedCard.PostCard:input_type -> yir.med.PostCardRequest
	23, // 17: yir.med.MedCard.GetCardByID:input_type -> yir.med.GetCardByIDRequest
	25, // 18: yir.med.MedCard.PutCard:input_type -> yir.med.PutCardRequest
	27, // 19: yir.med.MedCard.PatchCard:input_type -> yir.med.PatchCardRequest
	29, // 20: yir.med.MedCard.DeleteCard:input_type -> yir.med.DeleteCardRequest
	8,  // 21: yir.med.MedWorkers.GetMedWorkers:input_type -> yir.med.GetMedworkerRequest
	10, // 22: yir.med.MedWorkers.UpdateMedWorker:input_type -> yir.med.UpdateMedWorkerRequest
	12, // 23: yir.med.MedWorkers.GetMedWorkerByID:input_type -> yir.med.GetMedMedWorkerByIDRequest
	14, // 24: yir.med.MedWorkers.PatchMedWorker:input_type -> yir.med.PatchMedWorkerRequest
	15, // 25: yir.med.MedWorkers.AddMedWorker:input_type -> yir.med.AddMedWorkerRequest
	17, // 26: yir.med.MedWorkers.GetPatientsByMedWorker:input_type -> yir.med.GetPatientsByMedWorkerRequest
	2,  // 27: yir.med.MedPatient.AddPatient:input_type -> yir.med.CreatePatientRequest
	30, // 28: yir.med.MedPatient.GetPatientList:input_type -> google.protobuf.Empty
	4,  // 29: yir.med.MedPatient.GetPatientInfoByID:input_type -> yir.med.PatientInfoRequest
	6,  // 30: yir.med.MedPatient.UpdatePatient:input_type -> yir.med.PatientUpdateRequest
	20, // 31: yir.med.MedCard.GetCards:output_type -> yir.med.GetCardsResponse
	22, // 32: yir.med.MedCard.PostCard:output_type -> yir.med.PostCardResponse
	24, // 33: yir.med.MedCard.GetCardByID:output_type -> yir.med.GetCardByIDResponse
	26, // 34: yir.med.MedCard.PutCard:output_type -> yir.med.PutCardResponse
	28, // 35: yir.med.MedCard.PatchCard:output_type -> yir.med.PatchCardResponse
	30, // 36: yir.med.MedCard.DeleteCard:output_type -> google.protobuf.Empty
	9,  // 37: yir.med.MedWorkers.GetMedWorkers:output_type -> yir.med.GetMedworkerListResponse
	11, // 38: yir.med.MedWorkers.UpdateMedWorker:output_type -> yir.med.UpdateMedWorkerResponse
	13, // 39: yir.med.MedWorkers.GetMedWorkerByID:output_type -> yir.med.GetMedWorkerByIDResponse
	11, // 40: yir.med.MedWorkers.PatchMedWorker:output_type -> yir.med.UpdateMedWorkerResponse
	16, // 41: yir.med.MedWorkers.AddMedWorker:output_type -> yir.med.AddMedWorkerResponse
	18, // 42: yir.med.MedWorkers.GetPatientsByMedWorker:output_type -> yir.med.GetPatientsByMedWorkerResponse
	30, // 43: yir.med.MedPatient.AddPatient:output_type -> google.protobuf.Empty
	3,  // 44: yir.med.MedPatient.GetPatientList:output_type -> yir.med.PatientListResponse
	5,  // 45: yir.med.MedPatient.GetPatientInfoByID:output_type -> yir.med.PatientInfoResponse
	30, // 46: yir.med.MedPatient.UpdatePatient:output_type -> google.protobuf.Empty
	31, // [31:47] is the sub-list for method output_type
	15, // [15:31] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_med_proto_init() }
func file_med_proto_init() {
	if File_med_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_med_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Patient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePatientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PatientListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PatientInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PatientInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PatientUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MedWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedworkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedworkerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMedWorkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMedWorkerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedMedWorkerByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetMedWorkerByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PatchMedWorkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AddMedWorkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AddMedWorkerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetPatientsByMedWorkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetPatientsByMedWorkerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PostCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PostCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetCardByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetCardByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PutCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PutCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PatchCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*PatchCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_med_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_med_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_med_proto_goTypes,
		DependencyIndexes: file_med_proto_depIdxs,
		MessageInfos:      file_med_proto_msgTypes,
	}.Build()
	File_med_proto = out.File
	file_med_proto_rawDesc = nil
	file_med_proto_goTypes = nil
	file_med_proto_depIdxs = nil
}
