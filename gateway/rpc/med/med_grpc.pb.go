// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: med.proto

package med

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedCard_GetCards_FullMethodName    = "/yir.med.MedCard/GetCards"
	MedCard_PostCard_FullMethodName    = "/yir.med.MedCard/PostCard"
	MedCard_GetCardByID_FullMethodName = "/yir.med.MedCard/GetCardByID"
	MedCard_PutCard_FullMethodName     = "/yir.med.MedCard/PutCard"
	MedCard_PatchCard_FullMethodName   = "/yir.med.MedCard/PatchCard"
	MedCard_DeleteCard_FullMethodName  = "/yir.med.MedCard/DeleteCard"
)

// MedCardClient is the client API for MedCard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedCardClient interface {
	// Получение всех карт пациентов
	GetCards(ctx context.Context, in *GetCardsRequest, opts ...grpc.CallOption) (*GetCardsResponse, error)
	// Добавить карту пациента
	PostCard(ctx context.Context, in *PostCardRequest, opts ...grpc.CallOption) (*PostCardResponse, error)
	// Получить карту по id
	GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardByIDResponse, error)
	// Запутить карту
	PutCard(ctx context.Context, in *PutCardRequest, opts ...grpc.CallOption) (*PutCardResponse, error)
	// Запатчить карту
	PatchCard(ctx context.Context, in *PatchCardRequest, opts ...grpc.CallOption) (*PatchCardResponse, error)
	// Удалить карту
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type medCardClient struct {
	cc grpc.ClientConnInterface
}

func NewMedCardClient(cc grpc.ClientConnInterface) MedCardClient {
	return &medCardClient{cc}
}

func (c *medCardClient) GetCards(ctx context.Context, in *GetCardsRequest, opts ...grpc.CallOption) (*GetCardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardsResponse)
	err := c.cc.Invoke(ctx, MedCard_GetCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medCardClient) PostCard(ctx context.Context, in *PostCardRequest, opts ...grpc.CallOption) (*PostCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCardResponse)
	err := c.cc.Invoke(ctx, MedCard_PostCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medCardClient) GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardByIDResponse)
	err := c.cc.Invoke(ctx, MedCard_GetCardByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medCardClient) PutCard(ctx context.Context, in *PutCardRequest, opts ...grpc.CallOption) (*PutCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutCardResponse)
	err := c.cc.Invoke(ctx, MedCard_PutCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medCardClient) PatchCard(ctx context.Context, in *PatchCardRequest, opts ...grpc.CallOption) (*PatchCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchCardResponse)
	err := c.cc.Invoke(ctx, MedCard_PatchCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medCardClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, MedCard_DeleteCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedCardServer is the server API for MedCard service.
// All implementations must embed UnimplementedMedCardServer
// for forward compatibility.
type MedCardServer interface {
	// Получение всех карт пациентов
	GetCards(context.Context, *GetCardsRequest) (*GetCardsResponse, error)
	// Добавить карту пациента
	PostCard(context.Context, *PostCardRequest) (*PostCardResponse, error)
	// Получить карту по id
	GetCardByID(context.Context, *GetCardByIDRequest) (*GetCardByIDResponse, error)
	// Запутить карту
	PutCard(context.Context, *PutCardRequest) (*PutCardResponse, error)
	// Запатчить карту
	PatchCard(context.Context, *PatchCardRequest) (*PatchCardResponse, error)
	// Удалить карту
	DeleteCard(context.Context, *DeleteCardRequest) (*empty.Empty, error)
	mustEmbedUnimplementedMedCardServer()
}

// UnimplementedMedCardServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedCardServer struct{}

func (UnimplementedMedCardServer) GetCards(context.Context, *GetCardsRequest) (*GetCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCards not implemented")
}
func (UnimplementedMedCardServer) PostCard(context.Context, *PostCardRequest) (*PostCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCard not implemented")
}
func (UnimplementedMedCardServer) GetCardByID(context.Context, *GetCardByIDRequest) (*GetCardByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardByID not implemented")
}
func (UnimplementedMedCardServer) PutCard(context.Context, *PutCardRequest) (*PutCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCard not implemented")
}
func (UnimplementedMedCardServer) PatchCard(context.Context, *PatchCardRequest) (*PatchCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCard not implemented")
}
func (UnimplementedMedCardServer) DeleteCard(context.Context, *DeleteCardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedMedCardServer) mustEmbedUnimplementedMedCardServer() {}
func (UnimplementedMedCardServer) testEmbeddedByValue()                 {}

// UnsafeMedCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedCardServer will
// result in compilation errors.
type UnsafeMedCardServer interface {
	mustEmbedUnimplementedMedCardServer()
}

func RegisterMedCardServer(s grpc.ServiceRegistrar, srv MedCardServer) {
	// If the following call pancis, it indicates UnimplementedMedCardServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedCard_ServiceDesc, srv)
}

func _MedCard_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedCardServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedCard_GetCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedCardServer).GetCards(ctx, req.(*GetCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedCard_PostCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedCardServer).PostCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedCard_PostCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedCardServer).PostCard(ctx, req.(*PostCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedCard_GetCardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedCardServer).GetCardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedCard_GetCardByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedCardServer).GetCardByID(ctx, req.(*GetCardByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedCard_PutCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedCardServer).PutCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedCard_PutCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedCardServer).PutCard(ctx, req.(*PutCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedCard_PatchCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedCardServer).PatchCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedCard_PatchCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedCardServer).PatchCard(ctx, req.(*PatchCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedCard_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedCardServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedCard_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedCardServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedCard_ServiceDesc is the grpc.ServiceDesc for MedCard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedCard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yir.med.MedCard",
	HandlerType: (*MedCardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCards",
			Handler:    _MedCard_GetCards_Handler,
		},
		{
			MethodName: "PostCard",
			Handler:    _MedCard_PostCard_Handler,
		},
		{
			MethodName: "GetCardByID",
			Handler:    _MedCard_GetCardByID_Handler,
		},
		{
			MethodName: "PutCard",
			Handler:    _MedCard_PutCard_Handler,
		},
		{
			MethodName: "PatchCard",
			Handler:    _MedCard_PatchCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _MedCard_DeleteCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "med.proto",
}

const (
	MedWorkers_GetMedWorkers_FullMethodName          = "/yir.med.MedWorkers/GetMedWorkers"
	MedWorkers_UpdateMedWorker_FullMethodName        = "/yir.med.MedWorkers/UpdateMedWorker"
	MedWorkers_GetMedWorkerByID_FullMethodName       = "/yir.med.MedWorkers/GetMedWorkerByID"
	MedWorkers_PatchMedWorker_FullMethodName         = "/yir.med.MedWorkers/PatchMedWorker"
	MedWorkers_AddMedWorker_FullMethodName           = "/yir.med.MedWorkers/AddMedWorker"
	MedWorkers_GetPatientsByMedWorker_FullMethodName = "/yir.med.MedWorkers/GetPatientsByMedWorker"
)

// MedWorkersClient is the client API for MedWorkers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedWorkersClient interface {
	// Получение списка медработников
	//
	// Возвращает список со всеми медработниками
	GetMedWorkers(ctx context.Context, in *GetMedworkerRequest, opts ...grpc.CallOption) (*GetMedworkerListResponse, error)
	// Полное обновление информации о медработнике
	UpdateMedWorker(ctx context.Context, in *UpdateMedWorkerRequest, opts ...grpc.CallOption) (*UpdateMedWorkerResponse, error)
	// Получение информации о медработнике по ID
	//
	// Возвращает информацию о медработнике по ID
	GetMedWorkerByID(ctx context.Context, in *GetMedMedWorkerByIDRequest, opts ...grpc.CallOption) (*GetMedWorkerByIDResponse, error)
	// Частичное обновление информации о медработнике
	PatchMedWorker(ctx context.Context, in *PatchMedWorkerRequest, opts ...grpc.CallOption) (*UpdateMedWorkerResponse, error)
	// Добавление медработника
	AddMedWorker(ctx context.Context, in *AddMedWorkerRequest, opts ...grpc.CallOption) (*AddMedWorkerResponse, error)
	// Получение пациентов, прикрепленных к врачу
	//
	// Вернет пациентов, их карточки и главого врача
	GetPatientsByMedWorker(ctx context.Context, in *GetPatientsByMedWorkerRequest, opts ...grpc.CallOption) (*GetPatientsByMedWorkerResponse, error)
}

type medWorkersClient struct {
	cc grpc.ClientConnInterface
}

func NewMedWorkersClient(cc grpc.ClientConnInterface) MedWorkersClient {
	return &medWorkersClient{cc}
}

func (c *medWorkersClient) GetMedWorkers(ctx context.Context, in *GetMedworkerRequest, opts ...grpc.CallOption) (*GetMedworkerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedworkerListResponse)
	err := c.cc.Invoke(ctx, MedWorkers_GetMedWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medWorkersClient) UpdateMedWorker(ctx context.Context, in *UpdateMedWorkerRequest, opts ...grpc.CallOption) (*UpdateMedWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMedWorkerResponse)
	err := c.cc.Invoke(ctx, MedWorkers_UpdateMedWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medWorkersClient) GetMedWorkerByID(ctx context.Context, in *GetMedMedWorkerByIDRequest, opts ...grpc.CallOption) (*GetMedWorkerByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedWorkerByIDResponse)
	err := c.cc.Invoke(ctx, MedWorkers_GetMedWorkerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medWorkersClient) PatchMedWorker(ctx context.Context, in *PatchMedWorkerRequest, opts ...grpc.CallOption) (*UpdateMedWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMedWorkerResponse)
	err := c.cc.Invoke(ctx, MedWorkers_PatchMedWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medWorkersClient) AddMedWorker(ctx context.Context, in *AddMedWorkerRequest, opts ...grpc.CallOption) (*AddMedWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMedWorkerResponse)
	err := c.cc.Invoke(ctx, MedWorkers_AddMedWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medWorkersClient) GetPatientsByMedWorker(ctx context.Context, in *GetPatientsByMedWorkerRequest, opts ...grpc.CallOption) (*GetPatientsByMedWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientsByMedWorkerResponse)
	err := c.cc.Invoke(ctx, MedWorkers_GetPatientsByMedWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedWorkersServer is the server API for MedWorkers service.
// All implementations must embed UnimplementedMedWorkersServer
// for forward compatibility.
type MedWorkersServer interface {
	// Получение списка медработников
	//
	// Возвращает список со всеми медработниками
	GetMedWorkers(context.Context, *GetMedworkerRequest) (*GetMedworkerListResponse, error)
	// Полное обновление информации о медработнике
	UpdateMedWorker(context.Context, *UpdateMedWorkerRequest) (*UpdateMedWorkerResponse, error)
	// Получение информации о медработнике по ID
	//
	// Возвращает информацию о медработнике по ID
	GetMedWorkerByID(context.Context, *GetMedMedWorkerByIDRequest) (*GetMedWorkerByIDResponse, error)
	// Частичное обновление информации о медработнике
	PatchMedWorker(context.Context, *PatchMedWorkerRequest) (*UpdateMedWorkerResponse, error)
	// Добавление медработника
	AddMedWorker(context.Context, *AddMedWorkerRequest) (*AddMedWorkerResponse, error)
	// Получение пациентов, прикрепленных к врачу
	//
	// Вернет пациентов, их карточки и главого врача
	GetPatientsByMedWorker(context.Context, *GetPatientsByMedWorkerRequest) (*GetPatientsByMedWorkerResponse, error)
	mustEmbedUnimplementedMedWorkersServer()
}

// UnimplementedMedWorkersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedWorkersServer struct{}

func (UnimplementedMedWorkersServer) GetMedWorkers(context.Context, *GetMedworkerRequest) (*GetMedworkerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedWorkers not implemented")
}
func (UnimplementedMedWorkersServer) UpdateMedWorker(context.Context, *UpdateMedWorkerRequest) (*UpdateMedWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedWorker not implemented")
}
func (UnimplementedMedWorkersServer) GetMedWorkerByID(context.Context, *GetMedMedWorkerByIDRequest) (*GetMedWorkerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedWorkerByID not implemented")
}
func (UnimplementedMedWorkersServer) PatchMedWorker(context.Context, *PatchMedWorkerRequest) (*UpdateMedWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchMedWorker not implemented")
}
func (UnimplementedMedWorkersServer) AddMedWorker(context.Context, *AddMedWorkerRequest) (*AddMedWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMedWorker not implemented")
}
func (UnimplementedMedWorkersServer) GetPatientsByMedWorker(context.Context, *GetPatientsByMedWorkerRequest) (*GetPatientsByMedWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByMedWorker not implemented")
}
func (UnimplementedMedWorkersServer) mustEmbedUnimplementedMedWorkersServer() {}
func (UnimplementedMedWorkersServer) testEmbeddedByValue()                    {}

// UnsafeMedWorkersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedWorkersServer will
// result in compilation errors.
type UnsafeMedWorkersServer interface {
	mustEmbedUnimplementedMedWorkersServer()
}

func RegisterMedWorkersServer(s grpc.ServiceRegistrar, srv MedWorkersServer) {
	// If the following call pancis, it indicates UnimplementedMedWorkersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedWorkers_ServiceDesc, srv)
}

func _MedWorkers_GetMedWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedworkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedWorkersServer).GetMedWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedWorkers_GetMedWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedWorkersServer).GetMedWorkers(ctx, req.(*GetMedworkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedWorkers_UpdateMedWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedWorkersServer).UpdateMedWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedWorkers_UpdateMedWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedWorkersServer).UpdateMedWorker(ctx, req.(*UpdateMedWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedWorkers_GetMedWorkerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedMedWorkerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedWorkersServer).GetMedWorkerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedWorkers_GetMedWorkerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedWorkersServer).GetMedWorkerByID(ctx, req.(*GetMedMedWorkerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedWorkers_PatchMedWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchMedWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedWorkersServer).PatchMedWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedWorkers_PatchMedWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedWorkersServer).PatchMedWorker(ctx, req.(*PatchMedWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedWorkers_AddMedWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMedWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedWorkersServer).AddMedWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedWorkers_AddMedWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedWorkersServer).AddMedWorker(ctx, req.(*AddMedWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedWorkers_GetPatientsByMedWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByMedWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedWorkersServer).GetPatientsByMedWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedWorkers_GetPatientsByMedWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedWorkersServer).GetPatientsByMedWorker(ctx, req.(*GetPatientsByMedWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedWorkers_ServiceDesc is the grpc.ServiceDesc for MedWorkers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedWorkers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yir.med.MedWorkers",
	HandlerType: (*MedWorkersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMedWorkers",
			Handler:    _MedWorkers_GetMedWorkers_Handler,
		},
		{
			MethodName: "UpdateMedWorker",
			Handler:    _MedWorkers_UpdateMedWorker_Handler,
		},
		{
			MethodName: "GetMedWorkerByID",
			Handler:    _MedWorkers_GetMedWorkerByID_Handler,
		},
		{
			MethodName: "PatchMedWorker",
			Handler:    _MedWorkers_PatchMedWorker_Handler,
		},
		{
			MethodName: "AddMedWorker",
			Handler:    _MedWorkers_AddMedWorker_Handler,
		},
		{
			MethodName: "GetPatientsByMedWorker",
			Handler:    _MedWorkers_GetPatientsByMedWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "med.proto",
}

const (
	MedPatient_AddPatient_FullMethodName         = "/yir.med.MedPatient/AddPatient"
	MedPatient_GetPatientList_FullMethodName     = "/yir.med.MedPatient/GetPatientList"
	MedPatient_GetPatientInfoByID_FullMethodName = "/yir.med.MedPatient/GetPatientInfoByID"
	MedPatient_UpdatePatient_FullMethodName      = "/yir.med.MedPatient/UpdatePatient"
)

// MedPatientClient is the client API for MedPatient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedPatientClient interface {
	// Добавить пациента
	//
	// Принимает данные пациента и его карты.
	AddPatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Получить список пациентов
	//
	// Принимает пагинацию (Пока без нее). Возвращает список пациентов
	GetPatientList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PatientListResponse, error)
	// Получить пациента и его карту
	//
	// Получает id пациента. Возвращает пациента и его карту
	GetPatientInfoByID(ctx context.Context, in *PatientInfoRequest, opts ...grpc.CallOption) (*PatientInfoResponse, error)
	// UNIMPLEMENTED!!!
	//
	// Получает id пациента. Возвращает пациента, карту, снимки
	//
	//	rpc PatientShots (google.protobuf.Empty) returns (google.protobuf.Empty) {
	//	  option (google.api.http) = {
	//	    get: "/med/patient/shots/{id}"
	//	  };
	//	}
	//
	// Обновить данные пациента
	//
	// Получает пациента, карту. Возвращает id
	UpdatePatient(ctx context.Context, in *PatientUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type medPatientClient struct {
	cc grpc.ClientConnInterface
}

func NewMedPatientClient(cc grpc.ClientConnInterface) MedPatientClient {
	return &medPatientClient{cc}
}

func (c *medPatientClient) AddPatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, MedPatient_AddPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medPatientClient) GetPatientList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PatientListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientListResponse)
	err := c.cc.Invoke(ctx, MedPatient_GetPatientList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medPatientClient) GetPatientInfoByID(ctx context.Context, in *PatientInfoRequest, opts ...grpc.CallOption) (*PatientInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientInfoResponse)
	err := c.cc.Invoke(ctx, MedPatient_GetPatientInfoByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medPatientClient) UpdatePatient(ctx context.Context, in *PatientUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, MedPatient_UpdatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedPatientServer is the server API for MedPatient service.
// All implementations must embed UnimplementedMedPatientServer
// for forward compatibility.
type MedPatientServer interface {
	// Добавить пациента
	//
	// Принимает данные пациента и его карты.
	AddPatient(context.Context, *CreatePatientRequest) (*empty.Empty, error)
	// Получить список пациентов
	//
	// Принимает пагинацию (Пока без нее). Возвращает список пациентов
	GetPatientList(context.Context, *empty.Empty) (*PatientListResponse, error)
	// Получить пациента и его карту
	//
	// Получает id пациента. Возвращает пациента и его карту
	GetPatientInfoByID(context.Context, *PatientInfoRequest) (*PatientInfoResponse, error)
	// UNIMPLEMENTED!!!
	//
	// Получает id пациента. Возвращает пациента, карту, снимки
	//
	//	rpc PatientShots (google.protobuf.Empty) returns (google.protobuf.Empty) {
	//	  option (google.api.http) = {
	//	    get: "/med/patient/shots/{id}"
	//	  };
	//	}
	//
	// Обновить данные пациента
	//
	// Получает пациента, карту. Возвращает id
	UpdatePatient(context.Context, *PatientUpdateRequest) (*empty.Empty, error)
	mustEmbedUnimplementedMedPatientServer()
}

// UnimplementedMedPatientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedPatientServer struct{}

func (UnimplementedMedPatientServer) AddPatient(context.Context, *CreatePatientRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPatient not implemented")
}
func (UnimplementedMedPatientServer) GetPatientList(context.Context, *empty.Empty) (*PatientListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientList not implemented")
}
func (UnimplementedMedPatientServer) GetPatientInfoByID(context.Context, *PatientInfoRequest) (*PatientInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientInfoByID not implemented")
}
func (UnimplementedMedPatientServer) UpdatePatient(context.Context, *PatientUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedMedPatientServer) mustEmbedUnimplementedMedPatientServer() {}
func (UnimplementedMedPatientServer) testEmbeddedByValue()                    {}

// UnsafeMedPatientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedPatientServer will
// result in compilation errors.
type UnsafeMedPatientServer interface {
	mustEmbedUnimplementedMedPatientServer()
}

func RegisterMedPatientServer(s grpc.ServiceRegistrar, srv MedPatientServer) {
	// If the following call pancis, it indicates UnimplementedMedPatientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedPatient_ServiceDesc, srv)
}

func _MedPatient_AddPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedPatientServer).AddPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedPatient_AddPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedPatientServer).AddPatient(ctx, req.(*CreatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedPatient_GetPatientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedPatientServer).GetPatientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedPatient_GetPatientList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedPatientServer).GetPatientList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedPatient_GetPatientInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedPatientServer).GetPatientInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedPatient_GetPatientInfoByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedPatientServer).GetPatientInfoByID(ctx, req.(*PatientInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedPatient_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedPatientServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedPatient_UpdatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedPatientServer).UpdatePatient(ctx, req.(*PatientUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedPatient_ServiceDesc is the grpc.ServiceDesc for MedPatient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedPatient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yir.med.MedPatient",
	HandlerType: (*MedPatientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPatient",
			Handler:    _MedPatient_AddPatient_Handler,
		},
		{
			MethodName: "GetPatientList",
			Handler:    _MedPatient_GetPatientList_Handler,
		},
		{
			MethodName: "GetPatientInfoByID",
			Handler:    _MedPatient_GetPatientInfoByID_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _MedPatient_UpdatePatient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "med.proto",
}
