// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: s3upload.proto

package s3pb

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	S3_Upload_FullMethodName     = "/yir.s3upload.S3/Upload"
	S3_Get_FullMethodName        = "/yir.s3upload.S3/Get"
	S3_UploadFull_FullMethodName = "/yir.s3upload.S3/UploadFull"
	S3_GetFull_FullMethodName    = "/yir.s3upload.S3/GetFull"
)

// S3Client is the client API for S3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3Client interface {
	// Передача path идет первым сообщением, далее его передавать не нужно
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[File, empty.Empty], error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error)
	// лимит передачи gRPC 5мб(не будем менять) Использовать только для маленьких файлов!
	UploadFull(ctx context.Context, in *File, opts ...grpc.CallOption) (*empty.Empty, error)
	// лимит передачи gRPC 5мб(не будем менять) Использовать только для маленьких файлов!
	GetFull(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*File, error)
}

type s3Client struct {
	cc grpc.ClientConnInterface
}

func NewS3Client(cc grpc.ClientConnInterface) S3Client {
	return &s3Client{cc}
}

func (c *s3Client) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[File, empty.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &S3_ServiceDesc.Streams[0], S3_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[File, empty.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type S3_UploadClient = grpc.ClientStreamingClient[File, empty.Empty]

func (c *s3Client) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &S3_ServiceDesc.Streams[1], S3_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRequest, File]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type S3_GetClient = grpc.ServerStreamingClient[File]

func (c *s3Client) UploadFull(ctx context.Context, in *File, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, S3_UploadFull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3Client) GetFull(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, S3_GetFull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3Server is the server API for S3 service.
// All implementations must embed UnimplementedS3Server
// for forward compatibility.
type S3Server interface {
	// Передача path идет первым сообщением, далее его передавать не нужно
	Upload(grpc.ClientStreamingServer[File, empty.Empty]) error
	Get(*GetRequest, grpc.ServerStreamingServer[File]) error
	// лимит передачи gRPC 5мб(не будем менять) Использовать только для маленьких файлов!
	UploadFull(context.Context, *File) (*empty.Empty, error)
	// лимит передачи gRPC 5мб(не будем менять) Использовать только для маленьких файлов!
	GetFull(context.Context, *GetRequest) (*File, error)
	mustEmbedUnimplementedS3Server()
}

// UnimplementedS3Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedS3Server struct{}

func (UnimplementedS3Server) Upload(grpc.ClientStreamingServer[File, empty.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedS3Server) Get(*GetRequest, grpc.ServerStreamingServer[File]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedS3Server) UploadFull(context.Context, *File) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFull not implemented")
}
func (UnimplementedS3Server) GetFull(context.Context, *GetRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFull not implemented")
}
func (UnimplementedS3Server) mustEmbedUnimplementedS3Server() {}
func (UnimplementedS3Server) testEmbeddedByValue()            {}

// UnsafeS3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3Server will
// result in compilation errors.
type UnsafeS3Server interface {
	mustEmbedUnimplementedS3Server()
}

func RegisterS3Server(s grpc.ServiceRegistrar, srv S3Server) {
	// If the following call pancis, it indicates UnimplementedS3Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&S3_ServiceDesc, srv)
}

func _S3_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(S3Server).Upload(&grpc.GenericServerStream[File, empty.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type S3_UploadServer = grpc.ClientStreamingServer[File, empty.Empty]

func _S3_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(S3Server).Get(m, &grpc.GenericServerStream[GetRequest, File]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type S3_GetServer = grpc.ServerStreamingServer[File]

func _S3_UploadFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3Server).UploadFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3_UploadFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3Server).UploadFull(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3_GetFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3Server).GetFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3_GetFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3Server).GetFull(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S3_ServiceDesc is the grpc.ServiceDesc for S3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yir.s3upload.S3",
	HandlerType: (*S3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFull",
			Handler:    _S3_UploadFull_Handler,
		},
		{
			MethodName: "GetFull",
			Handler:    _S3_GetFull_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _S3_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _S3_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "s3upload.proto",
}
