// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/uzi"
			origElem := elem
			if l := len("/uzi"); len(elem) >= l && elem[0:l] == "/uzi" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch r.Method {
				case "POST":
					s.handleUziPostRequest([0]string{}, elemIsEscaped, w, r)
				default:
					s.notAllowed(w, r, "POST")
				}

				return
			}
			switch elem[0] {
			case '/': // Prefix: "/"
				origElem := elem
				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "device"
					origElem := elem
					if l := len("device"); len(elem) >= l && elem[0:l] == "device" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleUziDevicePostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleUziDevicesGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "echographics/"
					origElem := elem
					if l := len("echographics/"); len(elem) >= l && elem[0:l] == "echographics/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "uzi_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleUziEchographicsUziIDGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUziEchographicsUziIDPatchRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PATCH")
						}

						return
					}

					elem = origElem
				case 'i': // Prefix: "image/"
					origElem := elem
					if l := len("image/"); len(elem) >= l && elem[0:l] == "image/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/nodes-segments"
						origElem := elem
						if l := len("/nodes-segments"); len(elem) >= l && elem[0:l] == "/nodes-segments" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleUziImageIDNodesSegmentsGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'n': // Prefix: "nodes"
					origElem := elem
					if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-segments"
						origElem := elem
						if l := len("-segments"); len(elem) >= l && elem[0:l] == "-segments" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUziNodesSegmentsPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleUziNodesIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUziNodesIDPatchRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "segment"
					origElem := elem
					if l := len("segment"); len(elem) >= l && elem[0:l] == "segment" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleUziSegmentPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleUziSegmentIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUziSegmentIDPatchRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}
				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleUziIDGetRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					case "PATCH":
						s.handleUziIDPatchRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,PATCH")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "images"
						origElem := elem
						if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleUziIDImagesGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'n': // Prefix: "nodes"
						origElem := elem
						if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleUziIDNodesGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "s/"
				origElem := elem
				if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "external_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleUzisExternalIDGetRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/uzi"
			origElem := elem
			if l := len("/uzi"); len(elem) >= l && elem[0:l] == "/uzi" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch method {
				case "POST":
					r.name = UziPostOperation
					r.summary = "загрузить узи на обработку"
					r.operationID = ""
					r.pathPattern = "/uzi"
					r.args = args
					r.count = 0
					return r, true
				default:
					return
				}
			}
			switch elem[0] {
			case '/': // Prefix: "/"
				origElem := elem
				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "device"
					origElem := elem
					if l := len("device"); len(elem) >= l && elem[0:l] == "device" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = UziDevicePostOperation
							r.summary = "добавить uzi аппарат"
							r.operationID = ""
							r.pathPattern = "/uzi/device"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = UziDevicesGetOperation
								r.summary = "получит список uzi апппапапратов"
								r.operationID = ""
								r.pathPattern = "/uzi/devices"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "echographics/"
					origElem := elem
					if l := len("echographics/"); len(elem) >= l && elem[0:l] == "echographics/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "uzi_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = UziEchographicsUziIDGetOperation
							r.summary = "получить эхографику uzi"
							r.operationID = ""
							r.pathPattern = "/uzi/echographics/{uzi_id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = UziEchographicsUziIDPatchOperation
							r.summary = "обновить эхографику"
							r.operationID = ""
							r.pathPattern = "/uzi/echographics/{uzi_id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'i': // Prefix: "image/"
					origElem := elem
					if l := len("image/"); len(elem) >= l && elem[0:l] == "image/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/nodes-segments"
						origElem := elem
						if l := len("/nodes-segments"); len(elem) >= l && elem[0:l] == "/nodes-segments" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = UziImageIDNodesSegmentsGetOperation
								r.summary = "получит узлы и сегменты на указанном изображении"
								r.operationID = ""
								r.pathPattern = "/uzi/image/{id}/nodes-segments"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'n': // Prefix: "nodes"
					origElem := elem
					if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-segments"
						origElem := elem
						if l := len("-segments"); len(elem) >= l && elem[0:l] == "-segments" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = UziNodesSegmentsPostOperation
								r.summary = "добавить узел с сегментами"
								r.operationID = ""
								r.pathPattern = "/uzi/nodes-segments"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = UziNodesIDDeleteOperation
								r.summary = "удалить узел"
								r.operationID = ""
								r.pathPattern = "/uzi/nodes/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = UziNodesIDPatchOperation
								r.summary = "обновить узел"
								r.operationID = ""
								r.pathPattern = "/uzi/nodes/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "segment"
					origElem := elem
					if l := len("segment"); len(elem) >= l && elem[0:l] == "segment" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = UziSegmentPostOperation
							r.summary = "добавить новый сегмент"
							r.operationID = ""
							r.pathPattern = "/uzi/segment"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = UziSegmentIDDeleteOperation
								r.summary = "удалить сегмент"
								r.operationID = ""
								r.pathPattern = "/uzi/segment/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = UziSegmentIDPatchOperation
								r.summary = "обновить сегмент"
								r.operationID = ""
								r.pathPattern = "/uzi/segment/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}
				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = UziIDGetOperation
						r.summary = "получить узи"
						r.operationID = ""
						r.pathPattern = "/uzi/{id}"
						r.args = args
						r.count = 1
						return r, true
					case "PATCH":
						r.name = UziIDPatchOperation
						r.summary = "обновить узи"
						r.operationID = ""
						r.pathPattern = "/uzi/{id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "images"
						origElem := elem
						if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = UziIDImagesGetOperation
								r.summary = "получает списк изображений uzi"
								r.operationID = ""
								r.pathPattern = "/uzi/{id}/images"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'n': // Prefix: "nodes"
						origElem := elem
						if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = UziIDNodesGetOperation
								r.summary = "получить все узлы узи"
								r.operationID = ""
								r.pathPattern = "/uzi/{id}/nodes"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "s/"
				origElem := elem
				if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "external_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = UzisExternalIDGetOperation
						r.summary = "получить узи по внешнему id"
						r.operationID = ""
						r.pathPattern = "/uzis/{external_id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
