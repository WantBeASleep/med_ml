// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// UziDevicePost implements POST /uzi/device operation.
//
// Добавить uzi аппарат.
//
// POST /uzi/device
func (UnimplementedHandler) UziDevicePost(ctx context.Context, req *UziDevicePostReq) (r UziDevicePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziDevicesGet implements GET /uzi/devices operation.
//
// Получит список uzi апппапапратов.
//
// GET /uzi/devices
func (UnimplementedHandler) UziDevicesGet(ctx context.Context) (r UziDevicesGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziEchographicsUziIDGet implements GET /uzi/echographics/{uzi_id} operation.
//
// Получить эхографику uzi.
//
// GET /uzi/echographics/{uzi_id}
func (UnimplementedHandler) UziEchographicsUziIDGet(ctx context.Context, params UziEchographicsUziIDGetParams) (r UziEchographicsUziIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziEchographicsUziIDPatch implements PATCH /uzi/echographics/{uzi_id} operation.
//
// Обновить эхографику.
//
// PATCH /uzi/echographics/{uzi_id}
func (UnimplementedHandler) UziEchographicsUziIDPatch(ctx context.Context, req *Echographics, params UziEchographicsUziIDPatchParams) (r UziEchographicsUziIDPatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziIDGet implements GET /uzi/{id} operation.
//
// Получить узи.
//
// GET /uzi/{id}
func (UnimplementedHandler) UziIDGet(ctx context.Context, params UziIDGetParams) (r UziIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziIDImagesGet implements GET /uzi/{id}/images operation.
//
// Получает списк изображений uzi.
//
// GET /uzi/{id}/images
func (UnimplementedHandler) UziIDImagesGet(ctx context.Context, params UziIDImagesGetParams) (r UziIDImagesGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziIDNodesGet implements GET /uzi/{id}/nodes operation.
//
// Получить все узлы узи.
//
// GET /uzi/{id}/nodes
func (UnimplementedHandler) UziIDNodesGet(ctx context.Context, params UziIDNodesGetParams) (r UziIDNodesGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziIDPatch implements PATCH /uzi/{id} operation.
//
// Обновить узи.
//
// PATCH /uzi/{id}
func (UnimplementedHandler) UziIDPatch(ctx context.Context, req *UziIDPatchReq, params UziIDPatchParams) (r UziIDPatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziImageIDNodesSegmentsGet implements GET /uzi/image/{id}/nodes-segments operation.
//
// Получит узлы и сегменты на указанном изображении.
//
// GET /uzi/image/{id}/nodes-segments
func (UnimplementedHandler) UziImageIDNodesSegmentsGet(ctx context.Context, params UziImageIDNodesSegmentsGetParams) (r UziImageIDNodesSegmentsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziNodesIDDelete implements DELETE /uzi/nodes/{id} operation.
//
// Сегменты узла будут также удалены.
//
// DELETE /uzi/nodes/{id}
func (UnimplementedHandler) UziNodesIDDelete(ctx context.Context, params UziNodesIDDeleteParams) (r UziNodesIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziNodesIDPatch implements PATCH /uzi/nodes/{id} operation.
//
// Обновить узел.
//
// PATCH /uzi/nodes/{id}
func (UnimplementedHandler) UziNodesIDPatch(ctx context.Context, req *UziNodesIDPatchReq, params UziNodesIDPatchParams) (r UziNodesIDPatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziNodesSegmentsPost implements POST /uzi/nodes-segments operation.
//
// Добавить узел с сегментами.
//
// POST /uzi/nodes-segments
func (UnimplementedHandler) UziNodesSegmentsPost(ctx context.Context, req *UziNodesSegmentsPostReq) (r UziNodesSegmentsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziPost implements POST /uzi operation.
//
// Загрузить узи на обработку.
//
// POST /uzi
func (UnimplementedHandler) UziPost(ctx context.Context, req *UziPostReq) (r UziPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziSegmentIDDelete implements DELETE /uzi/segment/{id} operation.
//
// Если у узла не останется сегментов, он будет **удален**.
//
// DELETE /uzi/segment/{id}
func (UnimplementedHandler) UziSegmentIDDelete(ctx context.Context, params UziSegmentIDDeleteParams) (r UziSegmentIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziSegmentIDPatch implements PATCH /uzi/segment/{id} operation.
//
// Обновить сегмент.
//
// PATCH /uzi/segment/{id}
func (UnimplementedHandler) UziSegmentIDPatch(ctx context.Context, req *UziSegmentIDPatchReq, params UziSegmentIDPatchParams) (r UziSegmentIDPatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UziSegmentPost implements POST /uzi/segment operation.
//
// Добавить новый сегмент.
//
// POST /uzi/segment
func (UnimplementedHandler) UziSegmentPost(ctx context.Context, req *UziSegmentPostReq) (r UziSegmentPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UzisExternalIDGet implements GET /uzis/{external_id} operation.
//
// Получить узи по внешнему id.
//
// GET /uzis/{external_id}
func (UnimplementedHandler) UzisExternalIDGet(ctx context.Context, params UzisExternalIDGetParams) (r UzisExternalIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *ErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *ErrorStatusCode) {
	r = new(ErrorStatusCode)
	return r
}
