syntax = "proto3";

package yir.uzi;

option go_package = "yir/uzi/api;api";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "buf/validate/validate.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "UZI API"
    description : "Сервис нужен для хранения отношений **UZI**, **IMAGES**, "
                  "**FORMATION**, **SEGMENT**.\n"
                  "\n"
                  "**SEGMENT** - контур конкретного узла на конкретном "
                  "изображении.\n"
                  "*при добавлении узлов врачем, tirads можно опустить*\n"
                  "**FORMATION** - конкретный узел, можно ассоциировать с "
                  "физическим узлом, его сегменты могут быть на многих "
                  "изображениях.\n"
                  "**IMAGE** - одно изображение UZI, может содержать на себе "
                  "несколько сегментов.\n"
                  "**UZI**/**UZIINFO** - общая информация об узи. Все "
                  "остальные сущности так или иначе относятся к конкретному "
                  "узи\n"
                  "\n"
                  "**ВАЖНО**: в API используются 2 понятия для узи: **UZI** и "
                  "**UZIINFO**. *UZIINFO* - обозначает инфу об узи, id, "
                  "projection, аппарат и тд. *UZI* - это *UZIINFO && IMAGES && "
                  "FORMATION && SEGMENTS*.\n"
                  "\n"
                  "Наименование нуждается в рефакторинге, теперь все id генерируются"
                  "на стороне сервиса, поэтому никаких insert, а нормальный create"
                  "~не спрашивайте как так получилось~"
    version : "v0"
  }
};

service UziAPI {
  // /uzi/ блок

  // Добавить uzi c 
  rpc InsertUzi(Uzi) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/uzi"
      body : "*"
    };
  }

  // ID сгенерируется на стороне сервиса!
  rpc CreateUziInfo(CreateUziInfoRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/uzi/info"
      body : "*"
    };
  }

  // Получить uzi
  rpc GetUzi(UziIdRequest) returns (Uzi) {
    option (google.api.http) = {
      get : "/uzi/{uzi_id}"
    };
  }

  // Получить uziinfo
  rpc GetUziInfo(UziIdRequest) returns (UziInfo) {
    option (google.api.http) = {
      get : "/uzi/info/{uzi_id}"
    };
  }

  // Обновить uziinfo
  //
  // **ID при обновлении будет игнорироваться**
  rpc UpdateUziInfo(UpdateUziRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch : "/uzi/info/{uzi_id}"
      body : "uzi_info"
    };
  }

  // /image/ блок

  // Получить image && segments на image && formation segment'ов
  rpc GetImageWithSegments(ImageIdRequest) returns (ImageWithSegments) {
    option (google.api.http) = {
      get : "/image/segments/{image_id}"
    };
  }

  // /formation/ блок

  // Добавить formation + segments
  rpc InsertFormationWithSegments(InsertFormationWithSegmentsRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/formation/segments/{uzi_id}"
      body : "formation_with_segments"
    };
  }

  // Получить formation + segments
  rpc GetFormationWithSegments(FormationIdRequest)
      returns (FormationWithSegments) {
    option (google.api.http) = {
      get : "/formation/segments/{formation_id}"
    };
  }

  // Обновить formation
  //
  // **ID при обновлении будет игнорироваться**
  rpc UpdateFormation(UpdateFormationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch : "/formation/{formation_id}"
      body : "formation"
    };
  }

  // /device/

  // Получить список девайсов
  rpc GetDeviceList(google.protobuf.Empty) returns (GetDeviceListResponse) {
    option (google.api.http) = {
      get : "/device/list"
    };
  }
}

// Базовые структуры

message Tirads {
  double tirads_1 = 1 [
    (buf.validate.field).double.gte = 0.0,
    (buf.validate.field).double.lte = 100.0
  ];
  double tirads_2 = 2 [
    (buf.validate.field).double.gte = 0.0,
    (buf.validate.field).double.lte = 100.0
  ];
  double tirads_3 = 3 [
    (buf.validate.field).double.gte = 0.0,
    (buf.validate.field).double.lte = 100.0
  ];
  double tirads_4 = 4 [
    (buf.validate.field).double.gte = 0.0,
    (buf.validate.field).double.lte = 100.0
  ];
  double tirads_5 = 5 [
    (buf.validate.field).double.gte = 0.0,
    (buf.validate.field).double.lte = 100.0
  ];
}

message Device {
  int64 id = 100;
  string name = 200;
}

message Segment {
  string id = 100 [
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  string formation_id = 200 [
    json_name = "formation_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  string image_id = 300 [
    json_name = "image_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];

  string contor_url = 400
      [ json_name = "contor_url", (buf.validate.field).required = true ];
  Tirads tirads = 500 [ (buf.validate.field).required = true ];
}

message Formation {
  string id = 100 [
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];

  Tirads tirads = 200 [ (buf.validate.field).required = true ];
  bool ai = 300;
}

message Image {
  string id = 100 [
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  string url = 200 [ (buf.validate.field).required = true ];

  int64 page = 300 [ (buf.validate.field).required = true ];
}

message UziInfo {
  string id = 100 [
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  string url = 200 [ (buf.validate.field).required = true ];

  string projection = 300 [ (buf.validate.field).required = true ];
  string patient_id = 400 [
    json_name = "patient_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  int64 device_id = 500
      [ json_name = "device_id", (buf.validate.field).required = true ];
}

// Структуры RPC

message UziIdRequest {
  string uzi_id = 100 [
    json_name = "uzi_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
}

message ImageIdRequest {
  string image_id = 100 [
    json_name = "image_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
}

message FormationIdRequest {
  string formation_id = 100 [
    json_name = "formation_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
}

message Uzi {
  UziInfo uziInfo = 100
      [ json_name = "uzi_info", (buf.validate.field).required = true ];
  repeated Image images = 200 [ (buf.validate.field).required = true ];
  repeated Formation formations = 300 [ (buf.validate.field).required = true ];
  repeated Segment segments = 400 [ (buf.validate.field).required = true ];
}

// Так делать плохо, такделать неправильно, но я не потяну это рефакторить еще раз
// пока что просто еще одну структуру поверх, оставляем на Tech Debt
// 
message CreateUziInfoRequest {
  string url = 100 [ (buf.validate.field).required = true ];

  string projection = 200 [ (buf.validate.field).required = true ];
  string patient_id = 300 [
    json_name = "patient_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  int64 device_id = 400
      [ json_name = "device_id", (buf.validate.field).required = true ];
}

message UpdateUziRequest {
  string uzi_id = 100 [
    json_name = "uzi_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  UziInfo uzi_info = 200
      [ json_name = "uzi_info", (buf.validate.field).required = true ];
}

message ImageWithSegments {
  Image image = 100;
  repeated Formation formations = 300;
  repeated Segment segments = 200;
}

message FormationWithSegments {
  Formation formation = 100 [ (buf.validate.field).required = true ];
  repeated Segment segments = 200 [ (buf.validate.field).required = true ];
}

message InsertFormationWithSegmentsRequest {
  string uzi_id = 100
      [ json_name = "uzi_id", (buf.validate.field).string.uuid = true ];
  FormationWithSegments formation_with_segments = 200
      [ (buf.validate.field).required = true ];
}

message UpdateFormationRequest {
  string formation_id = 100 [
    json_name = "formation_id",
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  Formation formation = 200 [ (buf.validate.field).required = true ];
}

message GetDeviceListResponse { repeated Device devices = 100; }
