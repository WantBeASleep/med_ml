// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: uzi.proto

package uzi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Uzi_GetDevices_FullMethodName           = "/yir.uzi.Uzi/GetDevices"
	Uzi_InsertUzi_FullMethodName            = "/yir.uzi.Uzi/InsertUzi"
	Uzi_UpdateUzi_FullMethodName            = "/yir.uzi.Uzi/UpdateUzi"
	Uzi_GetUziMetaInfo_FullMethodName       = "/yir.uzi.Uzi/GetUziMetaInfo"
	Uzi_GetUziInfo_FullMethodName           = "/yir.uzi.Uzi/GetUziInfo"
	Uzi_GetImageInfo_FullMethodName         = "/yir.uzi.Uzi/GetImageInfo"
	Uzi_InsertFormations_FullMethodName     = "/yir.uzi.Uzi/InsertFormations"
	Uzi_InsertFormation_FullMethodName      = "/yir.uzi.Uzi/InsertFormation"
	Uzi_UpdateFormationMeta_FullMethodName  = "/yir.uzi.Uzi/UpdateFormationMeta"
	Uzi_UpdateFormation_FullMethodName      = "/yir.uzi.Uzi/UpdateFormation"
	Uzi_DeleteFormation_FullMethodName      = "/yir.uzi.Uzi/DeleteFormation"
	Uzi_DeleteFormationImage_FullMethodName = "/yir.uzi.Uzi/DeleteFormationImage"
)

// UziClient is the client API for Uzi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UziClient interface {
	// Получить список узи приборов
	//
	// Возвращает количество, пагинацию, и массив пар <ID, имя девайса>
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error)
	// Добавить UZI с сегментацией и классификацией
	//
	// Все uuid заранее сгенерены, url - ссылки на S3
	InsertUzi(ctx context.Context, in *InsertUziRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Обновить мета информацию об узи
	//
	// Не обновляет ссылки на S3
	UpdateUzi(ctx context.Context, in *UpdateUziRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Получить мета информацию об узи
	//
	// Возвращает информацию о самом узи и изображениях. Не возвращает узлы
	GetUziMetaInfo(ctx context.Context, in *GetUziMetaRequest, opts ...grpc.CallOption) (*GetUziMetaResponse, error)
	// Получить информацию об узи и узлах
	//
	// Возвращает полную информацию об узи и всех узлах
	GetUziInfo(ctx context.Context, in *GetUziRequest, opts ...grpc.CallOption) (*GetUziResponse, error)
	// Получить информацию о изображении узи и узлах
	//
	// Возвращает полную инфу об 1 изображении узи и узлах на нем
	GetImageInfo(ctx context.Context, in *GetImageInfoRequest, opts ...grpc.CallOption) (*GetImageInfoResponse, error)
	// Добавить узлы
	//
	// Все uuid заранее сгенерены, url - ссылки на S3
	InsertFormations(ctx context.Context, in *InsertFormationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Добавить 1 узел
	//
	// Все uuid заранее сгенерены, url - ссылки на S3
	InsertFormation(ctx context.Context, in *InsertFormationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Обновить мета информацию об узле
	//
	// Обновить инфу о tirads и etc. Не обновлять контура
	UpdateFormationMeta(ctx context.Context, in *UpdateFormationMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Обновить информацию об узле
	//
	// Обновить инфу о tirads и etc. Не обновлять контура
	UpdateFormation(ctx context.Context, in *UpdateFormationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Удалить узел по uuid
	//
	// Удалит полностью 1 узел на всех изображениях на которых он присутствует
	DeleteFormation(ctx context.Context, in *DeleteFormationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Удалить узел на изображении
	//
	// Удалит узел на 1 изображения, остальные контуру узла на других изображениях не изменятся
	DeleteFormationImage(ctx context.Context, in *DeleteFormationImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type uziClient struct {
	cc grpc.ClientConnInterface
}

func NewUziClient(cc grpc.ClientConnInterface) UziClient {
	return &uziClient{cc}
}

func (c *uziClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDevicesResponse)
	err := c.cc.Invoke(ctx, Uzi_GetDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) InsertUzi(ctx context.Context, in *InsertUziRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_InsertUzi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) UpdateUzi(ctx context.Context, in *UpdateUziRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_UpdateUzi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) GetUziMetaInfo(ctx context.Context, in *GetUziMetaRequest, opts ...grpc.CallOption) (*GetUziMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUziMetaResponse)
	err := c.cc.Invoke(ctx, Uzi_GetUziMetaInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) GetUziInfo(ctx context.Context, in *GetUziRequest, opts ...grpc.CallOption) (*GetUziResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUziResponse)
	err := c.cc.Invoke(ctx, Uzi_GetUziInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) GetImageInfo(ctx context.Context, in *GetImageInfoRequest, opts ...grpc.CallOption) (*GetImageInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageInfoResponse)
	err := c.cc.Invoke(ctx, Uzi_GetImageInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) InsertFormations(ctx context.Context, in *InsertFormationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_InsertFormations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) InsertFormation(ctx context.Context, in *InsertFormationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_InsertFormation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) UpdateFormationMeta(ctx context.Context, in *UpdateFormationMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_UpdateFormationMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) UpdateFormation(ctx context.Context, in *UpdateFormationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_UpdateFormation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) DeleteFormation(ctx context.Context, in *DeleteFormationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_DeleteFormation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziClient) DeleteFormationImage(ctx context.Context, in *DeleteFormationImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uzi_DeleteFormationImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UziServer is the server API for Uzi service.
// All implementations must embed UnimplementedUziServer
// for forward compatibility.
type UziServer interface {
	// Получить список узи приборов
	//
	// Возвращает количество, пагинацию, и массив пар <ID, имя девайса>
	GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error)
	// Добавить UZI с сегментацией и классификацией
	//
	// Все uuid заранее сгенерены, url - ссылки на S3
	InsertUzi(context.Context, *InsertUziRequest) (*emptypb.Empty, error)
	// Обновить мета информацию об узи
	//
	// Не обновляет ссылки на S3
	UpdateUzi(context.Context, *UpdateUziRequest) (*emptypb.Empty, error)
	// Получить мета информацию об узи
	//
	// Возвращает информацию о самом узи и изображениях. Не возвращает узлы
	GetUziMetaInfo(context.Context, *GetUziMetaRequest) (*GetUziMetaResponse, error)
	// Получить информацию об узи и узлах
	//
	// Возвращает полную информацию об узи и всех узлах
	GetUziInfo(context.Context, *GetUziRequest) (*GetUziResponse, error)
	// Получить информацию о изображении узи и узлах
	//
	// Возвращает полную инфу об 1 изображении узи и узлах на нем
	GetImageInfo(context.Context, *GetImageInfoRequest) (*GetImageInfoResponse, error)
	// Добавить узлы
	//
	// Все uuid заранее сгенерены, url - ссылки на S3
	InsertFormations(context.Context, *InsertFormationsRequest) (*emptypb.Empty, error)
	// Добавить 1 узел
	//
	// Все uuid заранее сгенерены, url - ссылки на S3
	InsertFormation(context.Context, *InsertFormationRequest) (*emptypb.Empty, error)
	// Обновить мета информацию об узле
	//
	// Обновить инфу о tirads и etc. Не обновлять контура
	UpdateFormationMeta(context.Context, *UpdateFormationMetaRequest) (*emptypb.Empty, error)
	// Обновить информацию об узле
	//
	// Обновить инфу о tirads и etc. Не обновлять контура
	UpdateFormation(context.Context, *UpdateFormationRequest) (*emptypb.Empty, error)
	// Удалить узел по uuid
	//
	// Удалит полностью 1 узел на всех изображениях на которых он присутствует
	DeleteFormation(context.Context, *DeleteFormationRequest) (*emptypb.Empty, error)
	// Удалить узел на изображении
	//
	// Удалит узел на 1 изображения, остальные контуру узла на других изображениях не изменятся
	DeleteFormationImage(context.Context, *DeleteFormationImageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUziServer()
}

// UnimplementedUziServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUziServer struct{}

func (UnimplementedUziServer) GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedUziServer) InsertUzi(context.Context, *InsertUziRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUzi not implemented")
}
func (UnimplementedUziServer) UpdateUzi(context.Context, *UpdateUziRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUzi not implemented")
}
func (UnimplementedUziServer) GetUziMetaInfo(context.Context, *GetUziMetaRequest) (*GetUziMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUziMetaInfo not implemented")
}
func (UnimplementedUziServer) GetUziInfo(context.Context, *GetUziRequest) (*GetUziResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUziInfo not implemented")
}
func (UnimplementedUziServer) GetImageInfo(context.Context, *GetImageInfoRequest) (*GetImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageInfo not implemented")
}
func (UnimplementedUziServer) InsertFormations(context.Context, *InsertFormationsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFormations not implemented")
}
func (UnimplementedUziServer) InsertFormation(context.Context, *InsertFormationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFormation not implemented")
}
func (UnimplementedUziServer) UpdateFormationMeta(context.Context, *UpdateFormationMetaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormationMeta not implemented")
}
func (UnimplementedUziServer) UpdateFormation(context.Context, *UpdateFormationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormation not implemented")
}
func (UnimplementedUziServer) DeleteFormation(context.Context, *DeleteFormationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFormation not implemented")
}
func (UnimplementedUziServer) DeleteFormationImage(context.Context, *DeleteFormationImageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFormationImage not implemented")
}
func (UnimplementedUziServer) mustEmbedUnimplementedUziServer() {}
func (UnimplementedUziServer) testEmbeddedByValue()             {}

// UnsafeUziServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UziServer will
// result in compilation errors.
type UnsafeUziServer interface {
	mustEmbedUnimplementedUziServer()
}

func RegisterUziServer(s grpc.ServiceRegistrar, srv UziServer) {
	// If the following call pancis, it indicates UnimplementedUziServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Uzi_ServiceDesc, srv)
}

func _Uzi_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_InsertUzi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUziRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).InsertUzi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_InsertUzi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).InsertUzi(ctx, req.(*InsertUziRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_UpdateUzi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUziRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).UpdateUzi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_UpdateUzi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).UpdateUzi(ctx, req.(*UpdateUziRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_GetUziMetaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUziMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).GetUziMetaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_GetUziMetaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).GetUziMetaInfo(ctx, req.(*GetUziMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_GetUziInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUziRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).GetUziInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_GetUziInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).GetUziInfo(ctx, req.(*GetUziRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_GetImageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).GetImageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_GetImageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).GetImageInfo(ctx, req.(*GetImageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_InsertFormations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertFormationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).InsertFormations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_InsertFormations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).InsertFormations(ctx, req.(*InsertFormationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_InsertFormation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertFormationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).InsertFormation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_InsertFormation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).InsertFormation(ctx, req.(*InsertFormationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_UpdateFormationMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormationMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).UpdateFormationMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_UpdateFormationMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).UpdateFormationMeta(ctx, req.(*UpdateFormationMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_UpdateFormation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).UpdateFormation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_UpdateFormation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).UpdateFormation(ctx, req.(*UpdateFormationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_DeleteFormation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).DeleteFormation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_DeleteFormation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).DeleteFormation(ctx, req.(*DeleteFormationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uzi_DeleteFormationImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormationImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziServer).DeleteFormationImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uzi_DeleteFormationImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziServer).DeleteFormationImage(ctx, req.(*DeleteFormationImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Uzi_ServiceDesc is the grpc.ServiceDesc for Uzi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uzi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yir.uzi.Uzi",
	HandlerType: (*UziServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _Uzi_GetDevices_Handler,
		},
		{
			MethodName: "InsertUzi",
			Handler:    _Uzi_InsertUzi_Handler,
		},
		{
			MethodName: "UpdateUzi",
			Handler:    _Uzi_UpdateUzi_Handler,
		},
		{
			MethodName: "GetUziMetaInfo",
			Handler:    _Uzi_GetUziMetaInfo_Handler,
		},
		{
			MethodName: "GetUziInfo",
			Handler:    _Uzi_GetUziInfo_Handler,
		},
		{
			MethodName: "GetImageInfo",
			Handler:    _Uzi_GetImageInfo_Handler,
		},
		{
			MethodName: "InsertFormations",
			Handler:    _Uzi_InsertFormations_Handler,
		},
		{
			MethodName: "InsertFormation",
			Handler:    _Uzi_InsertFormation_Handler,
		},
		{
			MethodName: "UpdateFormationMeta",
			Handler:    _Uzi_UpdateFormationMeta_Handler,
		},
		{
			MethodName: "UpdateFormation",
			Handler:    _Uzi_UpdateFormation_Handler,
		},
		{
			MethodName: "DeleteFormation",
			Handler:    _Uzi_DeleteFormation_Handler,
		},
		{
			MethodName: "DeleteFormationImage",
			Handler:    _Uzi_DeleteFormationImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uzi.proto",
}
