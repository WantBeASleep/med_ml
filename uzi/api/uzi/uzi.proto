syntax = "proto3";

package yir.uzi;

option go_package = "yir/uzi/api/uzi;uzi";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service Uzi {
    // Получить список узи приборов
    //
    // Возвращает количество, пагинацию, и массив пар <ID, имя девайса>
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse) {
        option (google.api.http) = {
            get: "/uzi/device/list"
        };
    }

    // Создать новый узи прибор
    //
    // Возврашает ID прибора
    rpc CreateDevice(CreateDevicesRequest) returns (CreateDevicesResponse) {
        option (google.api.http) = {
            post: "/uzi/device/create"
            body: "*"
        };
    }

    // Удаляет узи прибор
    rpc DeleteDevice(DeleteDevicesRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/uzi/device/delete/{device_id}"
        };
    }

    // Добавить UZI с сегментацией и классификацией
    //
    // Все uuid заранее сгенерены, url - ссылки на S3
    rpc InsertUzi(InsertUziRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/uzi/uzi/insert"
            body: "*"
        };
    }

    // Добавить узлы
    //
    // Все uuid заранее сгенерены, url - ссылки на S3
    rpc InsertFormations(InsertFormationsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/uzi/formations/insert/{uzi_uuid}"
            body: "*"
        };
    }

    // Добавить 1 узел
    //
    // Все uuid заранее сгенерены, url - ссылки на S3
    rpc InsertFormation(InsertFormationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/uzi/formation/insert/{uzi_uuid}"
            body: "*"
        };
    }

    // Обновить информацию об узле
    rpc UpdateFormation(UpdateFormationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/uzi/formation/update/{formation_uuid}"
            body: "*"
        };
    }

    // Удалить узел по uuid
    //
    // Удалит полностью 1 узел на всех изображениях на которых он присутствует
    rpc DeleteFormation(DeleteFormationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/uzi/formation/delete/{formation_uuid}"
        };
    }

    // Удалить узел на изображении
    //
    // Удалит узел на 1 изображения, остальные контуру узла на других изображениях не изменятся
    rpc DeleteFormationContor(DeleteFormationContorRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/uzi/formation/full-delete/{image_uuid}/{formation_uuid}"
        };
    }
}

message Pagination {
    string first = 1;
    string last = 2;
    string prev = 3;
    string next = 4;
}

message GetDevicesRequest {
    int64 limit = 100;
    int64 offset = 200;
}

message UziDevice {
    int64 id = 100;
    string name = 200;
}

message GetDevicesResponse {
    int64 count = 100;
    repeated UziDevice devices = 200;
    Pagination pagination = 300;
}

message CreateDevicesRequest {
    string name = 100;
}

message CreateDevicesResponse {
    int64 id = 100;
}

message DeleteDevicesRequest {
    int64 device_id = 100 [json_name = "device_id"];
}

message Tirads {
    double tirads_1 = 1;
    double tirads_2 = 2;
    double tirads_3 = 3;
    double tirads_4 = 4;
    double tirads_5 = 5;
}

message FormationOnImage {
    string image_uuid = 100 [json_name = "image_uuid"];
    string contor_url = 200 [json_name = "contor_url"];
    Tirads tirads = 300;
}

message Formation {
    string formation_uuid = 100 [json_name = "formation_uuid"];
    repeated FormationOnImage segments = 200;
    Tirads avg_tirads = 300 [json_name = "avg_tirads"];
}

message Image {
    string image_uuid = 100 [json_name = "image_uuid"];
    string image_url = 200 [json_name = "image_url"];
    int64 page = 300;
}

message InsertUziRequest {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
    string uzi_url = 200 [json_name = "uzi_url"];
    repeated Image images = 300;
    repeated Formation formations = 400;
    string projection = 500;
    bool ai = 600;
    string patient_uuid = 700 [json_name = "patient_uuid"];
    int64 device_id = 800 [json_name = "device_id"];
}

message InsertFormationsRequest {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
    repeated Formation formations = 200;
    bool ai = 300;
}

message InsertFormationRequest {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
    Formation formation = 200;
    bool ai = 300;
}

message DeleteFormationRequest {
    string formation_uuid = 100 [json_name = "formation_uuid"];
}

message DeleteFormationContorRequest {
    string image_uuid = 100 [json_name = "image_uuid"];
    string formation_uuid = 200 [json_name = "formation_uuid"];
}

message UpdateFormationOnImage {
    string image_uuid = 100 [json_name = "image_uuid"];
    Tirads tirads = 300;
}

message UpdateFormationRequest {
    string formation_uuid = 100 [json_name = "formation_uuid"];
    repeated UpdateFormationOnImage segments = 200;
    Tirads avg_tirads = 300 [json_name = "avg_tirads"];
}