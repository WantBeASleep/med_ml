syntax = "proto3";

package yir.uzi;

option go_package = "yir/uzi/api/uzi;uzi";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service Uzi {
    // Получить список узи приборов
    //
    // Возвращает количество, пагинацию, и массив пар <ID, имя девайса>
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse) {
        option (google.api.http) = {
            get: "/device/list"
        };
    }

    // Создать новый узи прибор
    //
    // Возврашает ID прибора
    rpc CreateDevice(CreateDevicesRequest) returns (CreateDevicesResponse) {
        option (google.api.http) = {
            post: "/device"
            body: "*"
        };
    }

    // Удаляет узи прибор
    rpc DeleteDevice(DeleteDevicesRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/device/{device_id}"
        };
    }

    // Добавить UZI с сегментацией и классификацией
    //
    // Все uuid заранее сгенерены, url - ссылки на S3
    rpc InsertUzi(InsertUziRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/uzi"
            body: "*"
        };
    }

    // Получить мета информацию об узи
    //
    // Возвращает информацию о самом узи и изображениях. Не возвращает узлы
    rpc GetUziMetaInfo(GetUziMetaRequest) returns (GetUziMetaResponse) {
        option (google.api.http) = {
            get: "/uzi/meta/{uzi_uuid}"
        };
    }

    // Получить информацию об узи и узлах
    //
    // Возвращает полную информацию об узи и всех узлах
    rpc GetUziInfo(GetUziRequest) returns (GetUziResponse) {
        option (google.api.http) = {
            get: "/uzi/{uzi_uuid}"
        };
    }

    // Получить информацию о изображении узи и узлах
    //
    // Возвращает полную инфу об 1 изображении узи и узлах на нем
    rpc GetImageInfo(GetImageInfoRequest) returns (GetImageInfoResponse) {
        option (google.api.http) = {
            get: "/image/{image_uuid}"
        };
    }

    // Добавить узлы
    //
    // Все uuid заранее сгенерены, url - ссылки на S3
    rpc InsertFormations(InsertFormationsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/formations/{uzi_uuid}"
            body: "*"
        };
    }

    // Добавить 1 узел
    //
    // Все uuid заранее сгенерены, url - ссылки на S3
    rpc InsertFormation(InsertFormationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/formation/{uzi_uuid}"
            body: "*"
        };
    }

    // Обновить мета информацию об узле
    //
    // Обновить инфу о tirads и etc. Не обновлять контура
    rpc UpdateFormationMeta(UpdateFormationMetaRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/formation/meta/{formation_uuid}"
            body: "*"
        };
    }

    // Обновить информацию об узле
    //
    // Обновить инфу о tirads и etc. Не обновлять контура
    rpc UpdateFormation(UpdateFormationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/formation/{formation_uuid}"
            body: "*"
        };
    }

    // Удалить узел по uuid
    //
    // Удалит полностью 1 узел на всех изображениях на которых он присутствует
    rpc DeleteFormation(DeleteFormationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/formation/{formation_uuid}"
        };
    }

    // Удалить узел на изображении
    //
    // Удалит узел на 1 изображения, остальные контуру узла на других изображениях не изменятся
    rpc DeleteFormationImage(DeleteFormationImageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/formation/image/{image_uuid}/{formation_uuid}"
        };
    }
}

message Pagination {
    string first = 1;
    string last = 2;
    string prev = 3;
    string next = 4;
}

message GetDevicesRequest {
    int64 limit = 100;
    int64 offset = 200;
}

message UziDevice {
    int64 id = 100;
    string name = 200;
}

message GetDevicesResponse {
    int64 count = 100;
    repeated UziDevice devices = 200;
    Pagination pagination = 300;
}

message CreateDevicesRequest {
    string name = 100;
}

message CreateDevicesResponse {
    int64 id = 100;
}

message DeleteDevicesRequest {
    int64 device_id = 100 [json_name = "device_id"];
}

message Tirads {
    double tirads_1 = 1;
    double tirads_2 = 2;
    double tirads_3 = 3;
    double tirads_4 = 4;
    double tirads_5 = 5;
}

message Segment {
    string contor_url = 200 [json_name = "contor_url"];
    Tirads tirads = 300;
}

message Formation {
    string formation_uuid = 100 [json_name = "formation_uuid"];
    // map<image_uuid, Segment>
    map<string, Segment> segments = 200;
    Tirads avg_tirads = 300 [json_name = "avg_tirads"];
    bool ai = 400;
}

message Image {
    string image_uuid = 100 [json_name = "image_uuid"];
    string image_url = 200 [json_name = "image_url"];
    int64 page = 300;
}

message UziData {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
    string uzi_url = 200 [json_name = "uzi_url"];

    string projection = 300;
    string patient_uuid = 400 [json_name = "patient_uuid"];
    int64 device_id = 500 [json_name = "device_id"];
}

message InsertUziRequest {
    UziData uzi = 100;
    repeated Image images = 200;
    repeated Formation formations = 300;
}

message GetUziMetaRequest {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
}

message GetUziMetaResponse {
    UziData uzi = 100;
    repeated Image images = 200;
}

message GetUziRequest {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
}

message GetUziResponse {
    UziData uzi = 100;
    repeated Image images = 200;
    repeated Formation formations = 300;
}

message GetImageInfoRequest {
    string image_uuid = 100 [json_name = "image_uuid"];
}

message FormationOnImage {
    string formation_uuid = 100 [json_name = "formation_uuid"];
    Segment segment = 200;
    Tirads avg_tirads = 300 [json_name = "avg_tirads"];
    bool ai = 400;
}

message GetImageInfoResponse {
    Image image = 100;
    repeated FormationOnImage formations = 200;
}

message InsertFormationsRequest {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
    repeated Formation formations = 200;
}

message InsertFormationRequest {
    string uzi_uuid = 100 [json_name = "uzi_uuid"];
    Formation formation = 200;
}

message DeleteFormationRequest {
    string formation_uuid = 100 [json_name = "formation_uuid"];
}

message DeleteFormationImageRequest {
    string image_uuid = 100 [json_name = "image_uuid"];
    string formation_uuid = 200 [json_name = "formation_uuid"];
}


message UpdateFormationMetaRequest {
    string formation_uuid = 100 [json_name = "formation_uuid"];
    // map<image_uuid, Tirads>
    map<string, Tirads> segments = 200;
    Tirads avg_tirads = 300 [json_name = "avg_tirads"];
}

message UpdateFormationRequest {
    string formation_uuid = 100 [json_name = "formation_uuid"];
    // map<image_uuid, Segment>
    map<string, Segment> segments = 200;
    Tirads avg_tirads = 300 [json_name = "avg_tirads"];
}