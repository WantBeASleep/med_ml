syntax = "proto3";

package yir.uzi;

option go_package = "yir/uzi/api/uzi;uzi";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service Uzi {
    // Получить список узи приборов
    //
    // Возвращает количество, пагинацию, и массив пар <id, имя девайса>
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse) {
        option (google.api.http) = {
            get: "/uzi/devices"
        };
    }

    // Создать группу с сегментацией и классификацией
    rpc CreateAIGroup(CreateGroupRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/uzi/create"
            body: "*"
        };
    }
}


message Pagination {
    string first = 1;
    string last = 2;
    string prev = 3;
    string next = 4;
}

message GetDevicesRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message UziDevice {
    int64 id = 1;
    string name = 2;
}

message GetDevicesResponse {
    int64 count = 1;
    repeated UziDevice devices = 2;
    Pagination pagination = 3;
}

message Tirads {
    double tirads_1 = 1;
    double tirads_2 = 2;
    double tirads_3 = 3;
    double tirads_4 = 4;
    double tirads_5 = 5;
}

message Nodule {
    string roi_uuid = 100 [json_name = "roi_uuid"];
    string contor_url = 200 [json_name = "contor_url"];
    Tirads tirads = 300;
}

message Image {
    string image_uuid = 100 [json_name = "image_uuid"];
    repeated Nodule nodules = 200;
    int64 page = 300;
}

message AvgRoi {
    string roi_uuid = 100 [json_name = "roi_uuid"];
    Tirads tirads = 200;
}

message CreateGroupRequest {
    string group_uuid = 100 [json_name = "group_uuid"];
    string group_url = 200 [json_name = "group_url"];
    repeated Image images = 300;
    repeated AvgRoi avg_rois = 400 [json_name = "avg_rois"];
    string projection = 500;
    string patient_uuid = 600 [json_name = "patient_uuid"];
    int64 device_id = 700 [json_name = "device_id"];
}
