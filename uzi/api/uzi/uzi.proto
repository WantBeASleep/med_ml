syntax = "proto3";

package yir.uzi;

option go_package = "yir/uzi/api/uzi;uzi";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service Uzi {
    // Получить список узи приборов
    //
    // Возвращает количество, пагинацию, и массив пар <id, имя девайса>
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse) {
        option (google.api.http) = {
            get: "/uzi/devices"
        };
    }

    // Создать группу с сегментацией и классификацией
    //
    // Изображения и контуры узлов приходят как ссылки на S3
    rpc CreateAIGroup(CreateAIGroupRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/uzi/create/aigroup"
            body: "*"
        };
    }

    // Возвращает группу с сегментацией и классификацией
    //
    // Изображения и контуры узлов возвращаются как ссылки на S3
    rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
        option (google.api.http) = {
            get: "/uzi/group/{group_uuid}"
        };
    }

    // Создает 1 новый узел
    //
    // На указанных изображениях будет создан 1 уникальный узел. 
    rpc CreateNodule(CreateNoduleRequest) returns (CreateNoduleResponse) {
        option (google.api.http) = {
            post: "/uzi/create/nodule"
            body: "*"
        };
    }

    // Удаляет узел по UUID
    rpc DeleteNodule(DeleteNoduleRequset) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/uzi/delete/nodule/{nodule_uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
              key: "403"
              value: {
                description: "Попытка удалить AI узел"
              }
            }
        };
    }
}


message Pagination {
    string first = 1;
    string last = 2;
    string prev = 3;
    string next = 4;
}

message GetDevicesRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message UziDevice {
    int64 id = 1;
    string name = 2;
}

message GetDevicesResponse {
    int64 count = 1;
    repeated UziDevice devices = 2;
    Pagination pagination = 3;
}

message Tirads {
    double tirads_1 = 1;
    double tirads_2 = 2;
    double tirads_3 = 3;
    double tirads_4 = 4;
    double tirads_5 = 5;
}

message Nodule {
    string nodule_uuid = 100 [json_name = "nodule_uuid"];
    string contor_url = 200 [json_name = "contor_url"];
    Tirads tirads = 300;
    bool ai = 400;
}

message Image {
    string image_uuid = 100 [json_name = "image_uuid"];
    repeated Nodule nodules = 200;
    int64 page = 300;
}

message AvgNodule {
    string nodule_uuid = 100 [json_name = "nodule_uuid"];
    Tirads tirads = 200;
}

message CreateAIGroupRequest {
    string group_uuid = 100 [json_name = "group_uuid"];
    string group_url = 200 [json_name = "group_url"];
    repeated Image images = 300;
    repeated AvgNodule avg_nodules = 400 [json_name = "avg_nodules"];
    string projection = 500;
    string patient_uuid = 600 [json_name = "patient_uuid"];
    int64 device_id = 700 [json_name = "device_id"];
}

message GetGroupRequest {
    string group_uuid = 100 [json_name = "group_uuid"];
}

message GetGroupResponse {
    string group_uuid = 100 [json_name = "group_uuid"];
    string group_url = 200 [json_name = "group_url"];
    repeated Image images = 300;
    repeated AvgNodule avg_nodules = 400 [json_name = "avg_nodules"];
    string projection = 500;
    string patient_uuid = 600 [json_name = "patient_uuid"];
    int64 device_id = 700 [json_name = "device_id"];
}

message Point {
    int64 x = 1;
    int64 y = 2;
}

message NoduleData {
    string image_uuid = 100 [json_name = "image_uuid"];
    repeated Point contor = 200;
    Tirads tirads = 300;
}

message CreateNoduleRequest {
    string group_uuid = 100 [json_name = "group_uuid"];
    repeated NoduleData nodule_data = 200 [json_name = "nodule_data"]; 
    Tirads avg_tirads = 300 [json_name = "avg_tirads"];
}

message CreateNoduleResponse {
    string nodule_uuid = 100 [json_name = "nodule_uuid"];
}

message DeleteNoduleRequset {
    string nodule_uuid = 100 [json_name = "nodule_uuid"];
}
