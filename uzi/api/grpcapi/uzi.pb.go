// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: uzi.proto

package grpcapi

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,200,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Tirads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tirads_23 float64 `protobuf:"fixed64,1,opt,name=tirads_23,json=tirads23,proto3" json:"tirads_23,omitempty"`
	Tirads_4  float64 `protobuf:"fixed64,2,opt,name=tirads_4,json=tirads4,proto3" json:"tirads_4,omitempty"`
	Tirads_5  float64 `protobuf:"fixed64,3,opt,name=tirads_5,json=tirads5,proto3" json:"tirads_5,omitempty"`
}

func (x *Tirads) Reset() {
	*x = Tirads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tirads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tirads) ProtoMessage() {}

func (x *Tirads) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tirads.ProtoReflect.Descriptor instead.
func (*Tirads) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{1}
}

func (x *Tirads) GetTirads_23() float64 {
	if x != nil {
		return x.Tirads_23
	}
	return 0
}

func (x *Tirads) GetTirads_4() float64 {
	if x != nil {
		return x.Tirads_4
	}
	return 0
}

func (x *Tirads) GetTirads_5() float64 {
	if x != nil {
		return x.Tirads_5
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int64 `protobuf:"varint,100,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"varint,200,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{2}
}

func (x *Point) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type SegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormationId string   `protobuf:"bytes,200,opt,name=formation_id,proto3" json:"formation_id,omitempty"`
	ImageId     string   `protobuf:"bytes,300,opt,name=image_id,proto3" json:"image_id,omitempty"`
	Contor      []*Point `protobuf:"bytes,400,rep,name=contor,proto3" json:"contor,omitempty"`
	Tirads      *Tirads  `protobuf:"bytes,500,opt,name=tirads,proto3" json:"tirads,omitempty"`
}

func (x *SegmentRequest) Reset() {
	*x = SegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRequest) ProtoMessage() {}

func (x *SegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRequest.ProtoReflect.Descriptor instead.
func (*SegmentRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{3}
}

func (x *SegmentRequest) GetFormationId() string {
	if x != nil {
		return x.FormationId
	}
	return ""
}

func (x *SegmentRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *SegmentRequest) GetContor() []*Point {
	if x != nil {
		return x.Contor
	}
	return nil
}

func (x *SegmentRequest) GetTirads() *Tirads {
	if x != nil {
		return x.Tirads
	}
	return nil
}

type SegmentNestedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string   `protobuf:"bytes,100,opt,name=image_id,proto3" json:"image_id,omitempty"`
	Contor  []*Point `protobuf:"bytes,200,rep,name=contor,proto3" json:"contor,omitempty"`
	Tirads  *Tirads  `protobuf:"bytes,300,opt,name=tirads,proto3" json:"tirads,omitempty"`
}

func (x *SegmentNestedRequest) Reset() {
	*x = SegmentNestedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentNestedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentNestedRequest) ProtoMessage() {}

func (x *SegmentNestedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentNestedRequest.ProtoReflect.Descriptor instead.
func (*SegmentNestedRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{4}
}

func (x *SegmentNestedRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *SegmentNestedRequest) GetContor() []*Point {
	if x != nil {
		return x.Contor
	}
	return nil
}

func (x *SegmentNestedRequest) GetTirads() *Tirads {
	if x != nil {
		return x.Tirads
	}
	return nil
}

type SegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	FormationId string   `protobuf:"bytes,200,opt,name=formation_id,proto3" json:"formation_id,omitempty"`
	ImageId     string   `protobuf:"bytes,300,opt,name=image_id,proto3" json:"image_id,omitempty"`
	Contor      []*Point `protobuf:"bytes,400,rep,name=contor,proto3" json:"contor,omitempty"`
	Tirads      *Tirads  `protobuf:"bytes,500,opt,name=tirads,proto3" json:"tirads,omitempty"`
}

func (x *SegmentResponse) Reset() {
	*x = SegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentResponse) ProtoMessage() {}

func (x *SegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentResponse.ProtoReflect.Descriptor instead.
func (*SegmentResponse) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{5}
}

func (x *SegmentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SegmentResponse) GetFormationId() string {
	if x != nil {
		return x.FormationId
	}
	return ""
}

func (x *SegmentResponse) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *SegmentResponse) GetContor() []*Point {
	if x != nil {
		return x.Contor
	}
	return nil
}

func (x *SegmentResponse) GetTirads() *Tirads {
	if x != nil {
		return x.Tirads
	}
	return nil
}

type FormationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tirads *Tirads `protobuf:"bytes,200,opt,name=tirads,proto3" json:"tirads,omitempty"`
	Ai     bool    `protobuf:"varint,300,opt,name=ai,proto3" json:"ai,omitempty"`
}

func (x *FormationRequest) Reset() {
	*x = FormationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationRequest) ProtoMessage() {}

func (x *FormationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationRequest.ProtoReflect.Descriptor instead.
func (*FormationRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{6}
}

func (x *FormationRequest) GetTirads() *Tirads {
	if x != nil {
		return x.Tirads
	}
	return nil
}

func (x *FormationRequest) GetAi() bool {
	if x != nil {
		return x.Ai
	}
	return false
}

type FormationWithNestedSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments []*SegmentNestedRequest `protobuf:"bytes,100,rep,name=segments,proto3" json:"segments,omitempty"`
	Tirads   *Tirads                 `protobuf:"bytes,200,opt,name=tirads,proto3" json:"tirads,omitempty"`
	Ai       bool                    `protobuf:"varint,300,opt,name=ai,proto3" json:"ai,omitempty"`
}

func (x *FormationWithNestedSegmentsRequest) Reset() {
	*x = FormationWithNestedSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationWithNestedSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationWithNestedSegmentsRequest) ProtoMessage() {}

func (x *FormationWithNestedSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationWithNestedSegmentsRequest.ProtoReflect.Descriptor instead.
func (*FormationWithNestedSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{7}
}

func (x *FormationWithNestedSegmentsRequest) GetSegments() []*SegmentNestedRequest {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *FormationWithNestedSegmentsRequest) GetTirads() *Tirads {
	if x != nil {
		return x.Tirads
	}
	return nil
}

func (x *FormationWithNestedSegmentsRequest) GetAi() bool {
	if x != nil {
		return x.Ai
	}
	return false
}

type FormationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Tirads *Tirads `protobuf:"bytes,200,opt,name=tirads,proto3" json:"tirads,omitempty"`
	Ai     bool    `protobuf:"varint,300,opt,name=ai,proto3" json:"ai,omitempty"`
}

func (x *FormationResponse) Reset() {
	*x = FormationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationResponse) ProtoMessage() {}

func (x *FormationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationResponse.ProtoReflect.Descriptor instead.
func (*FormationResponse) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{8}
}

func (x *FormationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FormationResponse) GetTirads() *Tirads {
	if x != nil {
		return x.Tirads
	}
	return nil
}

func (x *FormationResponse) GetAi() bool {
	if x != nil {
		return x.Ai
	}
	return false
}

type ImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Url  string `protobuf:"bytes,200,opt,name=url,proto3" json:"url,omitempty"`
	Page int64  `protobuf:"varint,300,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ImageResponse) Reset() {
	*x = ImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResponse) ProtoMessage() {}

func (x *ImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResponse.ProtoReflect.Descriptor instead.
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{9}
}

func (x *ImageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type UziRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"url"
	Url string `protobuf:"bytes,200,opt,name=url,proto3" json:"url,omitempty"`
	// @gotags: json:"projection"
	Projection string `protobuf:"bytes,300,opt,name=projection,proto3" json:"projection,omitempty"`
	// @gotags: json:"patient_id"
	PatientId string `protobuf:"bytes,400,opt,name=patient_id,proto3" json:"patient_id,omitempty"`
	// @gotags: json:"device_id"
	DeviceId int64 `protobuf:"varint,500,opt,name=device_id,proto3" json:"device_id,omitempty"`
}

func (x *UziRequest) Reset() {
	*x = UziRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UziRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UziRequest) ProtoMessage() {}

func (x *UziRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UziRequest.ProtoReflect.Descriptor instead.
func (*UziRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{10}
}

func (x *UziRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UziRequest) GetProjection() string {
	if x != nil {
		return x.Projection
	}
	return ""
}

func (x *UziRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *UziRequest) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type UziUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projection string `protobuf:"bytes,300,opt,name=projection,proto3" json:"projection,omitempty"`
	PatientId  string `protobuf:"bytes,400,opt,name=patient_id,proto3" json:"patient_id,omitempty"`
	DeviceId   int64  `protobuf:"varint,500,opt,name=device_id,proto3" json:"device_id,omitempty"`
}

func (x *UziUpdateRequest) Reset() {
	*x = UziUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UziUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UziUpdateRequest) ProtoMessage() {}

func (x *UziUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UziUpdateRequest.ProtoReflect.Descriptor instead.
func (*UziUpdateRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{11}
}

func (x *UziUpdateRequest) GetProjection() string {
	if x != nil {
		return x.Projection
	}
	return ""
}

func (x *UziUpdateRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *UziUpdateRequest) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type UziReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Url        string `protobuf:"bytes,200,opt,name=url,proto3" json:"url,omitempty"`
	Projection string `protobuf:"bytes,300,opt,name=projection,proto3" json:"projection,omitempty"`
	PatientId  string `protobuf:"bytes,400,opt,name=patient_id,proto3" json:"patient_id,omitempty"`
	DeviceId   int64  `protobuf:"varint,500,opt,name=device_id,proto3" json:"device_id,omitempty"`
}

func (x *UziReponse) Reset() {
	*x = UziReponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UziReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UziReponse) ProtoMessage() {}

func (x *UziReponse) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UziReponse.ProtoReflect.Descriptor instead.
func (*UziReponse) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{12}
}

func (x *UziReponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UziReponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UziReponse) GetProjection() string {
	if x != nil {
		return x.Projection
	}
	return ""
}

func (x *UziReponse) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *UziReponse) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uzi        *UziReponse          `protobuf:"bytes,100,opt,name=uzi,proto3" json:"uzi,omitempty"`
	Images     []*ImageResponse     `protobuf:"bytes,200,rep,name=images,proto3" json:"images,omitempty"`
	Formations []*FormationResponse `protobuf:"bytes,300,rep,name=formations,proto3" json:"formations,omitempty"`
	Segments   []*SegmentResponse   `protobuf:"bytes,400,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{13}
}

func (x *Report) GetUzi() *UziReponse {
	if x != nil {
		return x.Uzi
	}
	return nil
}

func (x *Report) GetImages() []*ImageResponse {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Report) GetFormations() []*FormationResponse {
	if x != nil {
		return x.Formations
	}
	return nil
}

func (x *Report) GetSegments() []*SegmentResponse {
	if x != nil {
		return x.Segments
	}
	return nil
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{14}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FormationWithSegments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formation *FormationResponse `protobuf:"bytes,100,opt,name=formation,proto3" json:"formation,omitempty"`
	Segments  []*SegmentResponse `protobuf:"bytes,200,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *FormationWithSegments) Reset() {
	*x = FormationWithSegments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormationWithSegments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormationWithSegments) ProtoMessage() {}

func (x *FormationWithSegments) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormationWithSegments.ProtoReflect.Descriptor instead.
func (*FormationWithSegments) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{15}
}

func (x *FormationWithSegments) GetFormation() *FormationResponse {
	if x != nil {
		return x.Formation
	}
	return nil
}

func (x *FormationWithSegments) GetSegments() []*SegmentResponse {
	if x != nil {
		return x.Segments
	}
	return nil
}

type UpdateUziRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string            `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Uzi *UziUpdateRequest `protobuf:"bytes,200,opt,name=uzi,proto3" json:"uzi,omitempty"`
}

func (x *UpdateUziRequest) Reset() {
	*x = UpdateUziRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUziRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUziRequest) ProtoMessage() {}

func (x *UpdateUziRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUziRequest.ProtoReflect.Descriptor instead.
func (*UpdateUziRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateUziRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUziRequest) GetUzi() *UziUpdateRequest {
	if x != nil {
		return x.Uzi
	}
	return nil
}

type ImageWithFormationsSegments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image      *ImageResponse       `protobuf:"bytes,100,opt,name=image,proto3" json:"image,omitempty"`
	Formations []*FormationResponse `protobuf:"bytes,300,rep,name=formations,proto3" json:"formations,omitempty"`
	Segments   []*SegmentResponse   `protobuf:"bytes,200,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *ImageWithFormationsSegments) Reset() {
	*x = ImageWithFormationsSegments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageWithFormationsSegments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageWithFormationsSegments) ProtoMessage() {}

func (x *ImageWithFormationsSegments) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageWithFormationsSegments.ProtoReflect.Descriptor instead.
func (*ImageWithFormationsSegments) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{17}
}

func (x *ImageWithFormationsSegments) GetImage() *ImageResponse {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageWithFormationsSegments) GetFormations() []*FormationResponse {
	if x != nil {
		return x.Formations
	}
	return nil
}

func (x *ImageWithFormationsSegments) GetSegments() []*SegmentResponse {
	if x != nil {
		return x.Segments
	}
	return nil
}

type CreateFormationWithSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                              `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Formation *FormationWithNestedSegmentsRequest `protobuf:"bytes,300,opt,name=formation,proto3" json:"formation,omitempty"`
}

func (x *CreateFormationWithSegmentsRequest) Reset() {
	*x = CreateFormationWithSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFormationWithSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFormationWithSegmentsRequest) ProtoMessage() {}

func (x *CreateFormationWithSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFormationWithSegmentsRequest.ProtoReflect.Descriptor instead.
func (*CreateFormationWithSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{18}
}

func (x *CreateFormationWithSegmentsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateFormationWithSegmentsRequest) GetFormation() *FormationWithNestedSegmentsRequest {
	if x != nil {
		return x.Formation
	}
	return nil
}

type CreateFormationWithSegmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormationId string   `protobuf:"bytes,100,opt,name=formation_id,proto3" json:"formation_id,omitempty"`
	SegmentsIds []string `protobuf:"bytes,200,rep,name=segments_ids,proto3" json:"segments_ids,omitempty"`
}

func (x *CreateFormationWithSegmentsResponse) Reset() {
	*x = CreateFormationWithSegmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFormationWithSegmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFormationWithSegmentsResponse) ProtoMessage() {}

func (x *CreateFormationWithSegmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFormationWithSegmentsResponse.ProtoReflect.Descriptor instead.
func (*CreateFormationWithSegmentsResponse) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{19}
}

func (x *CreateFormationWithSegmentsResponse) GetFormationId() string {
	if x != nil {
		return x.FormationId
	}
	return ""
}

func (x *CreateFormationWithSegmentsResponse) GetSegmentsIds() []string {
	if x != nil {
		return x.SegmentsIds
	}
	return nil
}

type UpdateFormationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string            `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Formation *FormationRequest `protobuf:"bytes,200,opt,name=formation,proto3" json:"formation,omitempty"`
}

func (x *UpdateFormationRequest) Reset() {
	*x = UpdateFormationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFormationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFormationRequest) ProtoMessage() {}

func (x *UpdateFormationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFormationRequest.ProtoReflect.Descriptor instead.
func (*UpdateFormationRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateFormationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFormationRequest) GetFormation() *FormationRequest {
	if x != nil {
		return x.Formation
	}
	return nil
}

type UpdateSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Tirads *Tirads `protobuf:"bytes,200,opt,name=tirads,proto3" json:"tirads,omitempty"`
}

func (x *UpdateSegmentRequest) Reset() {
	*x = UpdateSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSegmentRequest) ProtoMessage() {}

func (x *UpdateSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSegmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateSegmentRequest) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateSegmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSegmentRequest) GetTirads() *Tirads {
	if x != nil {
		return x.Tirads
	}
	return nil
}

type GetDeviceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*Device `protobuf:"bytes,100,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *GetDeviceListResponse) Reset() {
	*x = GetDeviceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uzi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceListResponse) ProtoMessage() {}

func (x *GetDeviceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uzi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceListResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceListResponse) Descriptor() ([]byte, []int) {
	return file_uzi_proto_rawDescGZIP(), []int{22}
}

func (x *GetDeviceListResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

var File_uzi_proto protoreflect.FileDescriptor

var file_uzi_proto_rawDesc = []byte{
	0x0a, 0x09, 0x75, 0x7a, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x79, 0x69, 0x72,
	0x2e, 0x75, 0x7a, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x06,
	0x54, 0x69, 0x72, 0x61, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73,
	0x5f, 0x32, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xba, 0x48, 0x14, 0x12, 0x12,
	0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x52, 0x08, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x32, 0x33, 0x12, 0x32, 0x0a, 0x08,
	0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x5f, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17,
	0xba, 0x48, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x29, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x07, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x34,
	0x12, 0x32, 0x0a, 0x08, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x5f, 0x35, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x17, 0xba, 0x48, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x59, 0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x07, 0x74, 0x69, 0x72,
	0x61, 0x64, 0x73, 0x35, 0x22, 0x36, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x01, 0x78, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28,
	0x00, 0x52, 0x01, 0x78, 0x12, 0x16, 0x0a, 0x01, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x01, 0x79, 0x22, 0xcf, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x06,
	0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x54, 0x69, 0x72, 0x61, 0x64, 0x73, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x22, 0xa2,
	0x01, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,
	0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x74, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x18, 0xac, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x54, 0x69, 0x72,
	0x61, 0x64, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x69, 0x72,
	0x61, 0x64, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x74, 0x6f, 0x72, 0x18, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x69, 0x72,
	0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x18, 0xf4, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x54, 0x69,
	0x72, 0x61, 0x64, 0x73, 0x52, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x10,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x54, 0x69, 0x72, 0x61,
	0x64, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x69, 0x72, 0x61,
	0x64, 0x73, 0x12, 0x0f, 0x0a, 0x02, 0x61, 0x69, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x61, 0x69, 0x22, 0xaa, 0x01, 0x0a, 0x22, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79,
	0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x54, 0x69, 0x72, 0x61, 0x64, 0x73, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x12,
	0x0f, 0x0a, 0x02, 0x61, 0x69, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x61, 0x69,
	0x22, 0x5e, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69,
	0x2e, 0x54, 0x69, 0x72, 0x61, 0x64, 0x73, 0x52, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x12,
	0x0f, 0x0a, 0x02, 0x61, 0x69, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x61, 0x69,
	0x22, 0x47, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x11, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x13, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0xac, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x55, 0x7a,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,
	0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0xf4, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x55, 0x7a,
	0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xac, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48,
	0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x0a, 0x55, 0x7a, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xac, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x90, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xf4, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0xd4, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x75, 0x7a,
	0x69, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a,
	0x69, 0x2e, 0x55, 0x7a, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x75, 0x7a,
	0x69, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a,
	0x69, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x90, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x21, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x7a,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x75, 0x7a, 0x69, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x55, 0x7a,
	0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x75, 0x7a, 0x69, 0x22, 0xbf, 0x01, 0x0a, 0x1b,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x69, 0x72,
	0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x69, 0x72, 0x2e,
	0x75, 0x7a, 0x69, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x95, 0x01,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x52, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xac,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x77, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x54,
	0x69, 0x72, 0x61, 0x64, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74,
	0x69, 0x72, 0x61, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x32, 0x99, 0x08, 0x0a, 0x06, 0x55, 0x7a,
	0x69, 0x41, 0x50, 0x49, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x7a,
	0x69, 0x12, 0x13, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x55, 0x7a, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69,
	0x2e, 0x49, 0x64, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a,
	0x2f, 0x75, 0x7a, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x55, 0x7a, 0x69, 0x12, 0x0b, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x49,
	0x64, 0x1a, 0x13, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x55, 0x7a, 0x69, 0x52,
	0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09,
	0x2f, 0x75, 0x7a, 0x69, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69,
	0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x53, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x7a, 0x69, 0x12, 0x19, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a,
	0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x7a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x55, 0x7a, 0x69,
	0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a,
	0x03, 0x75, 0x7a, 0x69, 0x1a, 0x09, 0x2f, 0x75, 0x7a, 0x69, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x79, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x0b, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x49, 0x64, 0x1a, 0x24,
	0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x75,
	0x7a, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x79, 0x69, 0x72,
	0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x09, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x2f, 0x75, 0x7a, 0x69, 0x2f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x71, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0b, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69,
	0x2e, 0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x75, 0x7a,
	0x69, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x74, 0x68,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x76, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x13, 0x2f, 0x75, 0x7a, 0x69, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6b, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x79, 0x69, 0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x06, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x1a,
	0x11, 0x2f, 0x75, 0x7a, 0x69, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x79, 0x69,
	0x72, 0x2e, 0x75, 0x7a, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x75, 0x7a, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0xba, 0x08, 0x92, 0x41, 0x9c, 0x08, 0x12, 0x99, 0x08, 0x0a,
	0x2c, 0x55, 0x5a, 0x49, 0x20, 0x41, 0x50, 0x49, 0x20, 0x2a, 0x2a, 0xd0, 0x9f, 0xd0, 0xa3, 0xd0,
	0xa2, 0xd0, 0x98, 0x20, 0xd0, 0x9a, 0xd0, 0x90, 0xd0, 0x9a, 0x20, 0xd0, 0x97, 0xd0, 0x90, 0xd0,
	0x93, 0xd0, 0x9b, 0xd0, 0xa3, 0xd0, 0xa8, 0xd0, 0x9a, 0xd0, 0x90, 0x2a, 0x2a, 0x12, 0xe4, 0x07,
	0xd0, 0xa1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd1,
	0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1,
	0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20,
	0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,
	0xd0, 0xb9, 0x20, 0x2a, 0x2a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x2a, 0x2a, 0x2c, 0x20, 0x2a,
	0x2a, 0x55, 0x5a, 0x49, 0x2a, 0x2a, 0x2c, 0x20, 0x2a, 0x2a, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53,
	0x2a, 0x2a, 0x2c, 0x20, 0x2a, 0x2a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x2a,
	0x2a, 0x2c, 0x20, 0x2a, 0x2a, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x2a, 0x2a, 0x2e, 0x0a,
	0x0a, 0x2a, 0x2a, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x2a, 0x2a, 0x20, 0x2d, 0x20, 0xd0,
	0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xbd, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3,
	0xd0, 0xbe, 0x20, 0xd1, 0x83, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb0, 0x20, 0xd0, 0xbd, 0xd0, 0xb0,
	0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0,
	0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80,
	0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0x2e, 0x0a, 0x2a, 0xd0,
	0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb2,
	0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd1, 0x83, 0xd0, 0xb7, 0xd0,
	0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5,
	0xd0, 0xbc, 0x2c, 0x20, 0x74, 0x69, 0x72, 0x61, 0x64, 0x73, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0,
	0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82,
	0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x2a, 0x0a, 0x2a, 0x2a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x2a, 0x2a, 0x20, 0x2d, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xba,
	0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x83, 0xd0,
	0xb7, 0xd0, 0xb5, 0xd0, 0xbb, 0x2c, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0,
	0xbe, 0x20, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8,
	0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1, 0x81, 0x20,
	0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xba,
	0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd1, 0x83, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0x2c,
	0x20, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbc,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1,
	0x83, 0xd1, 0x82, 0x20, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbd, 0xd0,
	0xb0, 0x20, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0,
	0xb8, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x85, 0x2e, 0x0a, 0x2a, 0x2a, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x2a, 0x2a, 0x20, 0x2d, 0x20, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xb8,
	0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x55, 0x5a, 0x49, 0x2c, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6,
	0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
	0xb6, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0,
	0xb5, 0xd0, 0xb1, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0x2e, 0x0a, 0x2a, 0x2a, 0x55,
	0x5a, 0x49, 0x2a, 0x2a, 0x20, 0x2d, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb0, 0xd1,
	0x8f, 0x20, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0,
	0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0x20, 0xd1, 0x83, 0xd0, 0xb7,
	0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x92, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,
	0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd1, 0x81,
	0xd1, 0x83, 0xd1, 0x89, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1,
	0x82, 0xd0, 0xb0, 0xd0, 0xba, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0xd0,
	0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd1, 0x81, 0xd1, 0x8f, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0x20, 0xd0, 0xba,
	0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd1, 0x83, 0xd0, 0xb7, 0xd0, 0xb8, 0x0a, 0x2a, 0x2a, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x2a, 0x2a, 0x20, 0x2d, 0x20, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0x20,
	0x75, 0x7a, 0x69, 0x20, 0x26, 0x26, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20, 0x26, 0x26,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x26, 0x26, 0x20, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x0a, 0x2a, 0x2a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x75, 0x7a, 0x69, 0x20, 0x69, 0x64, 0x2a, 0x2a, 0x2c, 0x20,
	0x2a, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x89, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1,
	0x8c, 0x20, 0xd0, 0xbd, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb4, 0xd0,
	0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd1, 0x85, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0,
	0x20, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd1, 0x85, 0x2a, 0x32, 0x02, 0x76, 0x30, 0x5a, 0x18, 0x79, 0x69, 0x72, 0x2f, 0x75, 0x7a,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uzi_proto_rawDescOnce sync.Once
	file_uzi_proto_rawDescData = file_uzi_proto_rawDesc
)

func file_uzi_proto_rawDescGZIP() []byte {
	file_uzi_proto_rawDescOnce.Do(func() {
		file_uzi_proto_rawDescData = protoimpl.X.CompressGZIP(file_uzi_proto_rawDescData)
	})
	return file_uzi_proto_rawDescData
}

var file_uzi_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_uzi_proto_goTypes = []any{
	(*Device)(nil),                              // 0: yir.uzi.Device
	(*Tirads)(nil),                              // 1: yir.uzi.Tirads
	(*Point)(nil),                               // 2: yir.uzi.Point
	(*SegmentRequest)(nil),                      // 3: yir.uzi.SegmentRequest
	(*SegmentNestedRequest)(nil),                // 4: yir.uzi.SegmentNestedRequest
	(*SegmentResponse)(nil),                     // 5: yir.uzi.SegmentResponse
	(*FormationRequest)(nil),                    // 6: yir.uzi.FormationRequest
	(*FormationWithNestedSegmentsRequest)(nil),  // 7: yir.uzi.FormationWithNestedSegmentsRequest
	(*FormationResponse)(nil),                   // 8: yir.uzi.FormationResponse
	(*ImageResponse)(nil),                       // 9: yir.uzi.ImageResponse
	(*UziRequest)(nil),                          // 10: yir.uzi.UziRequest
	(*UziUpdateRequest)(nil),                    // 11: yir.uzi.UziUpdateRequest
	(*UziReponse)(nil),                          // 12: yir.uzi.UziReponse
	(*Report)(nil),                              // 13: yir.uzi.Report
	(*Id)(nil),                                  // 14: yir.uzi.Id
	(*FormationWithSegments)(nil),               // 15: yir.uzi.FormationWithSegments
	(*UpdateUziRequest)(nil),                    // 16: yir.uzi.UpdateUziRequest
	(*ImageWithFormationsSegments)(nil),         // 17: yir.uzi.ImageWithFormationsSegments
	(*CreateFormationWithSegmentsRequest)(nil),  // 18: yir.uzi.CreateFormationWithSegmentsRequest
	(*CreateFormationWithSegmentsResponse)(nil), // 19: yir.uzi.CreateFormationWithSegmentsResponse
	(*UpdateFormationRequest)(nil),              // 20: yir.uzi.UpdateFormationRequest
	(*UpdateSegmentRequest)(nil),                // 21: yir.uzi.UpdateSegmentRequest
	(*GetDeviceListResponse)(nil),               // 22: yir.uzi.GetDeviceListResponse
	(*empty.Empty)(nil),                         // 23: google.protobuf.Empty
}
var file_uzi_proto_depIdxs = []int32{
	2,  // 0: yir.uzi.SegmentRequest.contor:type_name -> yir.uzi.Point
	1,  // 1: yir.uzi.SegmentRequest.tirads:type_name -> yir.uzi.Tirads
	2,  // 2: yir.uzi.SegmentNestedRequest.contor:type_name -> yir.uzi.Point
	1,  // 3: yir.uzi.SegmentNestedRequest.tirads:type_name -> yir.uzi.Tirads
	2,  // 4: yir.uzi.SegmentResponse.contor:type_name -> yir.uzi.Point
	1,  // 5: yir.uzi.SegmentResponse.tirads:type_name -> yir.uzi.Tirads
	1,  // 6: yir.uzi.FormationRequest.tirads:type_name -> yir.uzi.Tirads
	4,  // 7: yir.uzi.FormationWithNestedSegmentsRequest.segments:type_name -> yir.uzi.SegmentNestedRequest
	1,  // 8: yir.uzi.FormationWithNestedSegmentsRequest.tirads:type_name -> yir.uzi.Tirads
	1,  // 9: yir.uzi.FormationResponse.tirads:type_name -> yir.uzi.Tirads
	12, // 10: yir.uzi.Report.uzi:type_name -> yir.uzi.UziReponse
	9,  // 11: yir.uzi.Report.images:type_name -> yir.uzi.ImageResponse
	8,  // 12: yir.uzi.Report.formations:type_name -> yir.uzi.FormationResponse
	5,  // 13: yir.uzi.Report.segments:type_name -> yir.uzi.SegmentResponse
	8,  // 14: yir.uzi.FormationWithSegments.formation:type_name -> yir.uzi.FormationResponse
	5,  // 15: yir.uzi.FormationWithSegments.segments:type_name -> yir.uzi.SegmentResponse
	11, // 16: yir.uzi.UpdateUziRequest.uzi:type_name -> yir.uzi.UziUpdateRequest
	9,  // 17: yir.uzi.ImageWithFormationsSegments.image:type_name -> yir.uzi.ImageResponse
	8,  // 18: yir.uzi.ImageWithFormationsSegments.formations:type_name -> yir.uzi.FormationResponse
	5,  // 19: yir.uzi.ImageWithFormationsSegments.segments:type_name -> yir.uzi.SegmentResponse
	7,  // 20: yir.uzi.CreateFormationWithSegmentsRequest.formation:type_name -> yir.uzi.FormationWithNestedSegmentsRequest
	6,  // 21: yir.uzi.UpdateFormationRequest.formation:type_name -> yir.uzi.FormationRequest
	1,  // 22: yir.uzi.UpdateSegmentRequest.tirads:type_name -> yir.uzi.Tirads
	0,  // 23: yir.uzi.GetDeviceListResponse.devices:type_name -> yir.uzi.Device
	10, // 24: yir.uzi.UziAPI.CreateUzi:input_type -> yir.uzi.UziRequest
	14, // 25: yir.uzi.UziAPI.GetUzi:input_type -> yir.uzi.Id
	14, // 26: yir.uzi.UziAPI.GetReport:input_type -> yir.uzi.Id
	16, // 27: yir.uzi.UziAPI.UpdateUzi:input_type -> yir.uzi.UpdateUziRequest
	14, // 28: yir.uzi.UziAPI.GetImageWithFormationsSegments:input_type -> yir.uzi.Id
	18, // 29: yir.uzi.UziAPI.CreateFormationWithSegments:input_type -> yir.uzi.CreateFormationWithSegmentsRequest
	14, // 30: yir.uzi.UziAPI.GetFormationWithSegments:input_type -> yir.uzi.Id
	20, // 31: yir.uzi.UziAPI.UpdateFormation:input_type -> yir.uzi.UpdateFormationRequest
	21, // 32: yir.uzi.UziAPI.UpdateSegment:input_type -> yir.uzi.UpdateSegmentRequest
	23, // 33: yir.uzi.UziAPI.GetDeviceList:input_type -> google.protobuf.Empty
	14, // 34: yir.uzi.UziAPI.CreateUzi:output_type -> yir.uzi.Id
	12, // 35: yir.uzi.UziAPI.GetUzi:output_type -> yir.uzi.UziReponse
	13, // 36: yir.uzi.UziAPI.GetReport:output_type -> yir.uzi.Report
	12, // 37: yir.uzi.UziAPI.UpdateUzi:output_type -> yir.uzi.UziReponse
	17, // 38: yir.uzi.UziAPI.GetImageWithFormationsSegments:output_type -> yir.uzi.ImageWithFormationsSegments
	19, // 39: yir.uzi.UziAPI.CreateFormationWithSegments:output_type -> yir.uzi.CreateFormationWithSegmentsResponse
	15, // 40: yir.uzi.UziAPI.GetFormationWithSegments:output_type -> yir.uzi.FormationWithSegments
	8,  // 41: yir.uzi.UziAPI.UpdateFormation:output_type -> yir.uzi.FormationResponse
	5,  // 42: yir.uzi.UziAPI.UpdateSegment:output_type -> yir.uzi.SegmentResponse
	22, // 43: yir.uzi.UziAPI.GetDeviceList:output_type -> yir.uzi.GetDeviceListResponse
	34, // [34:44] is the sub-list for method output_type
	24, // [24:34] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_uzi_proto_init() }
func file_uzi_proto_init() {
	if File_uzi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_uzi_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Tirads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SegmentNestedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FormationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FormationWithNestedSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FormationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UziRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UziUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UziReponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FormationWithSegments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUziRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ImageWithFormationsSegments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFormationWithSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFormationWithSegmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateFormationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uzi_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetDeviceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uzi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uzi_proto_goTypes,
		DependencyIndexes: file_uzi_proto_depIdxs,
		MessageInfos:      file_uzi_proto_msgTypes,
	}.Build()
	File_uzi_proto = out.File
	file_uzi_proto_rawDesc = nil
	file_uzi_proto_goTypes = nil
	file_uzi_proto_depIdxs = nil
}
