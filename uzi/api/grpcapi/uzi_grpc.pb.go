// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: uzi.proto

package grpcapi

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UziAPI_CreateUzi_FullMethodName                      = "/yir.uzi.UziAPI/CreateUzi"
	UziAPI_GetUzi_FullMethodName                         = "/yir.uzi.UziAPI/GetUzi"
	UziAPI_GetReport_FullMethodName                      = "/yir.uzi.UziAPI/GetReport"
	UziAPI_UpdateUzi_FullMethodName                      = "/yir.uzi.UziAPI/UpdateUzi"
	UziAPI_GetImageWithFormationsSegments_FullMethodName = "/yir.uzi.UziAPI/GetImageWithFormationsSegments"
	UziAPI_CreateFormationWithSegments_FullMethodName    = "/yir.uzi.UziAPI/CreateFormationWithSegments"
	UziAPI_GetFormationWithSegments_FullMethodName       = "/yir.uzi.UziAPI/GetFormationWithSegments"
	UziAPI_UpdateFormation_FullMethodName                = "/yir.uzi.UziAPI/UpdateFormation"
	UziAPI_UpdateSegment_FullMethodName                  = "/yir.uzi.UziAPI/UpdateSegment"
	UziAPI_GetDeviceList_FullMethodName                  = "/yir.uzi.UziAPI/GetDeviceList"
)

// UziAPIClient is the client API for UziAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UziAPIClient interface {
	// Создать uzi
	CreateUzi(ctx context.Context, in *UziRequest, opts ...grpc.CallOption) (*Id, error)
	// Получить uzi
	GetUzi(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UziReponse, error)
	// Получить report (файлы идут как ссылки в S3)
	GetReport(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Report, error)
	UpdateUzi(ctx context.Context, in *UpdateUziRequest, opts ...grpc.CallOption) (*UziReponse, error)
	// Получить image с сегментами и узлами на нем
	GetImageWithFormationsSegments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageWithFormationsSegments, error)
	// Добавить formation + segments
	CreateFormationWithSegments(ctx context.Context, in *CreateFormationWithSegmentsRequest, opts ...grpc.CallOption) (*CreateFormationWithSegmentsResponse, error)
	// Получить formation + segments
	GetFormationWithSegments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FormationWithSegments, error)
	// Обновить formation
	UpdateFormation(ctx context.Context, in *UpdateFormationRequest, opts ...grpc.CallOption) (*FormationResponse, error)
	UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error)
	// Получить список девайсов
	GetDeviceList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDeviceListResponse, error)
}

type uziAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUziAPIClient(cc grpc.ClientConnInterface) UziAPIClient {
	return &uziAPIClient{cc}
}

func (c *uziAPIClient) CreateUzi(ctx context.Context, in *UziRequest, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, UziAPI_CreateUzi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) GetUzi(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UziReponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UziReponse)
	err := c.cc.Invoke(ctx, UziAPI_GetUzi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) GetReport(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Report, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Report)
	err := c.cc.Invoke(ctx, UziAPI_GetReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) UpdateUzi(ctx context.Context, in *UpdateUziRequest, opts ...grpc.CallOption) (*UziReponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UziReponse)
	err := c.cc.Invoke(ctx, UziAPI_UpdateUzi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) GetImageWithFormationsSegments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageWithFormationsSegments, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageWithFormationsSegments)
	err := c.cc.Invoke(ctx, UziAPI_GetImageWithFormationsSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) CreateFormationWithSegments(ctx context.Context, in *CreateFormationWithSegmentsRequest, opts ...grpc.CallOption) (*CreateFormationWithSegmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFormationWithSegmentsResponse)
	err := c.cc.Invoke(ctx, UziAPI_CreateFormationWithSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) GetFormationWithSegments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FormationWithSegments, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormationWithSegments)
	err := c.cc.Invoke(ctx, UziAPI_GetFormationWithSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) UpdateFormation(ctx context.Context, in *UpdateFormationRequest, opts ...grpc.CallOption) (*FormationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormationResponse)
	err := c.cc.Invoke(ctx, UziAPI_UpdateFormation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SegmentResponse)
	err := c.cc.Invoke(ctx, UziAPI_UpdateSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uziAPIClient) GetDeviceList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDeviceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceListResponse)
	err := c.cc.Invoke(ctx, UziAPI_GetDeviceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UziAPIServer is the server API for UziAPI service.
// All implementations must embed UnimplementedUziAPIServer
// for forward compatibility.
type UziAPIServer interface {
	// Создать uzi
	CreateUzi(context.Context, *UziRequest) (*Id, error)
	// Получить uzi
	GetUzi(context.Context, *Id) (*UziReponse, error)
	// Получить report (файлы идут как ссылки в S3)
	GetReport(context.Context, *Id) (*Report, error)
	UpdateUzi(context.Context, *UpdateUziRequest) (*UziReponse, error)
	// Получить image с сегментами и узлами на нем
	GetImageWithFormationsSegments(context.Context, *Id) (*ImageWithFormationsSegments, error)
	// Добавить formation + segments
	CreateFormationWithSegments(context.Context, *CreateFormationWithSegmentsRequest) (*CreateFormationWithSegmentsResponse, error)
	// Получить formation + segments
	GetFormationWithSegments(context.Context, *Id) (*FormationWithSegments, error)
	// Обновить formation
	UpdateFormation(context.Context, *UpdateFormationRequest) (*FormationResponse, error)
	UpdateSegment(context.Context, *UpdateSegmentRequest) (*SegmentResponse, error)
	// Получить список девайсов
	GetDeviceList(context.Context, *empty.Empty) (*GetDeviceListResponse, error)
	mustEmbedUnimplementedUziAPIServer()
}

// UnimplementedUziAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUziAPIServer struct{}

func (UnimplementedUziAPIServer) CreateUzi(context.Context, *UziRequest) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUzi not implemented")
}
func (UnimplementedUziAPIServer) GetUzi(context.Context, *Id) (*UziReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUzi not implemented")
}
func (UnimplementedUziAPIServer) GetReport(context.Context, *Id) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedUziAPIServer) UpdateUzi(context.Context, *UpdateUziRequest) (*UziReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUzi not implemented")
}
func (UnimplementedUziAPIServer) GetImageWithFormationsSegments(context.Context, *Id) (*ImageWithFormationsSegments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageWithFormationsSegments not implemented")
}
func (UnimplementedUziAPIServer) CreateFormationWithSegments(context.Context, *CreateFormationWithSegmentsRequest) (*CreateFormationWithSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFormationWithSegments not implemented")
}
func (UnimplementedUziAPIServer) GetFormationWithSegments(context.Context, *Id) (*FormationWithSegments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormationWithSegments not implemented")
}
func (UnimplementedUziAPIServer) UpdateFormation(context.Context, *UpdateFormationRequest) (*FormationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormation not implemented")
}
func (UnimplementedUziAPIServer) UpdateSegment(context.Context, *UpdateSegmentRequest) (*SegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegment not implemented")
}
func (UnimplementedUziAPIServer) GetDeviceList(context.Context, *empty.Empty) (*GetDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceList not implemented")
}
func (UnimplementedUziAPIServer) mustEmbedUnimplementedUziAPIServer() {}
func (UnimplementedUziAPIServer) testEmbeddedByValue()                {}

// UnsafeUziAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UziAPIServer will
// result in compilation errors.
type UnsafeUziAPIServer interface {
	mustEmbedUnimplementedUziAPIServer()
}

func RegisterUziAPIServer(s grpc.ServiceRegistrar, srv UziAPIServer) {
	// If the following call pancis, it indicates UnimplementedUziAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UziAPI_ServiceDesc, srv)
}

func _UziAPI_CreateUzi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UziRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).CreateUzi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_CreateUzi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).CreateUzi(ctx, req.(*UziRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_GetUzi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).GetUzi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_GetUzi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).GetUzi(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_GetReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).GetReport(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_UpdateUzi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUziRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).UpdateUzi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_UpdateUzi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).UpdateUzi(ctx, req.(*UpdateUziRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_GetImageWithFormationsSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).GetImageWithFormationsSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_GetImageWithFormationsSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).GetImageWithFormationsSegments(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_CreateFormationWithSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormationWithSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).CreateFormationWithSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_CreateFormationWithSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).CreateFormationWithSegments(ctx, req.(*CreateFormationWithSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_GetFormationWithSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).GetFormationWithSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_GetFormationWithSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).GetFormationWithSegments(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_UpdateFormation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).UpdateFormation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_UpdateFormation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).UpdateFormation(ctx, req.(*UpdateFormationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_UpdateSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).UpdateSegment(ctx, req.(*UpdateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UziAPI_GetDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UziAPIServer).GetDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UziAPI_GetDeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UziAPIServer).GetDeviceList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UziAPI_ServiceDesc is the grpc.ServiceDesc for UziAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UziAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yir.uzi.UziAPI",
	HandlerType: (*UziAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUzi",
			Handler:    _UziAPI_CreateUzi_Handler,
		},
		{
			MethodName: "GetUzi",
			Handler:    _UziAPI_GetUzi_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _UziAPI_GetReport_Handler,
		},
		{
			MethodName: "UpdateUzi",
			Handler:    _UziAPI_UpdateUzi_Handler,
		},
		{
			MethodName: "GetImageWithFormationsSegments",
			Handler:    _UziAPI_GetImageWithFormationsSegments_Handler,
		},
		{
			MethodName: "CreateFormationWithSegments",
			Handler:    _UziAPI_CreateFormationWithSegments_Handler,
		},
		{
			MethodName: "GetFormationWithSegments",
			Handler:    _UziAPI_GetFormationWithSegments_Handler,
		},
		{
			MethodName: "UpdateFormation",
			Handler:    _UziAPI_UpdateFormation_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _UziAPI_UpdateSegment_Handler,
		},
		{
			MethodName: "GetDeviceList",
			Handler:    _UziAPI_GetDeviceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uzi.proto",
}
